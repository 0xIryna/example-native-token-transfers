/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface EndpointRegistryInterface extends Interface {
  getFunction(nameOrSignature: "getEndpoints"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "EndpointAdded" | "EndpointRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getEndpoints",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getEndpoints",
    data: BytesLike
  ): Result;
}

export namespace EndpointAddedEvent {
  export type InputTuple = [endpoint: AddressLike];
  export type OutputTuple = [endpoint: string];
  export interface OutputObject {
    endpoint: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EndpointRemovedEvent {
  export type InputTuple = [endpoint: AddressLike];
  export type OutputTuple = [endpoint: string];
  export interface OutputObject {
    endpoint: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EndpointRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): EndpointRegistry;
  waitForDeployment(): Promise<this>;

  interface: EndpointRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getEndpoints: TypedContractMethod<[], [string[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getEndpoints"
  ): TypedContractMethod<[], [string[]], "view">;

  getEvent(
    key: "EndpointAdded"
  ): TypedContractEvent<
    EndpointAddedEvent.InputTuple,
    EndpointAddedEvent.OutputTuple,
    EndpointAddedEvent.OutputObject
  >;
  getEvent(
    key: "EndpointRemoved"
  ): TypedContractEvent<
    EndpointRemovedEvent.InputTuple,
    EndpointRemovedEvent.OutputTuple,
    EndpointRemovedEvent.OutputObject
  >;

  filters: {
    "EndpointAdded(address)": TypedContractEvent<
      EndpointAddedEvent.InputTuple,
      EndpointAddedEvent.OutputTuple,
      EndpointAddedEvent.OutputObject
    >;
    EndpointAdded: TypedContractEvent<
      EndpointAddedEvent.InputTuple,
      EndpointAddedEvent.OutputTuple,
      EndpointAddedEvent.OutputObject
    >;

    "EndpointRemoved(address)": TypedContractEvent<
      EndpointRemovedEvent.InputTuple,
      EndpointRemovedEvent.OutputTuple,
      EndpointRemovedEvent.OutputObject
    >;
    EndpointRemoved: TypedContractEvent<
      EndpointRemovedEvent.InputTuple,
      EndpointRemovedEvent.OutputTuple,
      EndpointRemovedEvent.OutputObject
    >;
  };
}
