/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace VmSafe {
  export type LogStruct = {
    topics: BytesLike[];
    data: BytesLike;
    emitter: AddressLike;
  };

  export type LogStructOutput = [
    topics: string[],
    data: string,
    emitter: string
  ] & { topics: string[]; data: string; emitter: string };
}

export declare namespace CCTPMessageLib {
  export type CCTPMessageStruct = { message: BytesLike; signature: BytesLike };

  export type CCTPMessageStructOutput = [message: string, signature: string] & {
    message: string;
    signature: string;
  };
}

export interface CircleMessageTransmitterSimulatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "fetchMessageTransmitterLogsFromLogs"
      | "fetchSignedMessageFromLog"
      | "messageTransmitter"
      | "signMessage"
      | "valid"
      | "vm"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fetchMessageTransmitterLogsFromLogs",
    values: [VmSafe.LogStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchSignedMessageFromLog",
    values: [VmSafe.LogStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "messageTransmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "valid", values?: undefined): string;
  encodeFunctionData(functionFragment: "vm", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "fetchMessageTransmitterLogsFromLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchSignedMessageFromLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageTransmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "valid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vm", data: BytesLike): Result;
}

export interface CircleMessageTransmitterSimulator extends BaseContract {
  connect(runner?: ContractRunner | null): CircleMessageTransmitterSimulator;
  waitForDeployment(): Promise<this>;

  interface: CircleMessageTransmitterSimulatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  fetchMessageTransmitterLogsFromLogs: TypedContractMethod<
    [logs: VmSafe.LogStruct[]],
    [VmSafe.LogStructOutput[]],
    "view"
  >;

  fetchSignedMessageFromLog: TypedContractMethod<
    [log: VmSafe.LogStruct],
    [CCTPMessageLib.CCTPMessageStructOutput],
    "view"
  >;

  messageTransmitter: TypedContractMethod<[], [string], "view">;

  signMessage: TypedContractMethod<[message: BytesLike], [string], "view">;

  valid: TypedContractMethod<[], [boolean], "view">;

  vm: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "fetchMessageTransmitterLogsFromLogs"
  ): TypedContractMethod<
    [logs: VmSafe.LogStruct[]],
    [VmSafe.LogStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "fetchSignedMessageFromLog"
  ): TypedContractMethod<
    [log: VmSafe.LogStruct],
    [CCTPMessageLib.CCTPMessageStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "messageTransmitter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "signMessage"
  ): TypedContractMethod<[message: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "valid"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(nameOrSignature: "vm"): TypedContractMethod<[], [string], "view">;

  filters: {};
}
