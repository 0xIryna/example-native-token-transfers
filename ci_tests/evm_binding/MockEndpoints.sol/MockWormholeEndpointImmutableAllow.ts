/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace WormholeEndpoint {
  export type WormholeEndpointInstructionStruct = {
    shouldSkipRelayerSend: boolean;
  };

  export type WormholeEndpointInstructionStructOutput = [
    shouldSkipRelayerSend: boolean
  ] & { shouldSkipRelayerSend: boolean };
}

export declare namespace EndpointStructs {
  export type EndpointInstructionStruct = {
    index: BigNumberish;
    payload: BytesLike;
  };

  export type EndpointInstructionStructOutput = [
    index: bigint,
    payload: string
  ] & { index: bigint; payload: string };

  export type EndpointMessageStruct = {
    sourceManagerAddress: BytesLike;
    recipientManagerAddress: BytesLike;
    managerPayload: BytesLike;
    endpointPayload: BytesLike;
  };

  export type EndpointMessageStructOutput = [
    sourceManagerAddress: string,
    recipientManagerAddress: string,
    managerPayload: string,
    endpointPayload: string
  ] & {
    sourceManagerAddress: string;
    recipientManagerAddress: string;
    managerPayload: string;
    endpointPayload: string;
  };
}

export interface MockWormholeEndpointImmutableAllowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "GAS_LIMIT"
      | "consistencyLevel"
      | "encodeWormholeEndpointInstruction"
      | "getManagerOwner"
      | "getManagerToken"
      | "getMigratesImmutables"
      | "getWormholeSibling"
      | "initialize"
      | "isPaused"
      | "isSpecialRelayingEnabled"
      | "isVAAConsumed"
      | "isWormholeEvmChain"
      | "isWormholeRelayingEnabled"
      | "manager"
      | "managerToken"
      | "migrate"
      | "owner"
      | "parseWormholeEndpointInstruction"
      | "pauser"
      | "quoteDeliveryPrice"
      | "receiveMessage"
      | "receiveWormholeMessages"
      | "sendMessage"
      | "setIsWormholeEvmChain"
      | "setIsWormholeRelayingEnabled"
      | "setWormholeSibling"
      | "specialRelayer"
      | "transferEndpointOwnership"
      | "transferOwnership"
      | "transferPauserCapability"
      | "upgrade"
      | "wormhole"
      | "wormholeEndpoint_evmChainId"
      | "wormholeRelayer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "Initialized"
      | "NotPaused"
      | "OwnershipTransferred"
      | "Paused"
      | "PauserTransferred"
      | "ReceivedMessage"
      | "ReceivedRelayedMessage"
      | "SendEndpointMessage"
      | "SetIsSpecialRelayingEnabled"
      | "SetIsWormholeEvmChain"
      | "SetIsWormholeRelayingEnabled"
      | "SetWormholeSibling"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(functionFragment: "GAS_LIMIT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "consistencyLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encodeWormholeEndpointInstruction",
    values: [WormholeEndpoint.WormholeEndpointInstructionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getManagerOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getManagerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMigratesImmutables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWormholeSibling",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isSpecialRelayingEnabled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isVAAConsumed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWormholeEvmChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWormholeRelayingEnabled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "managerToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "migrate", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parseWormholeEndpointInstruction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pauser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteDeliveryPrice",
    values: [BigNumberish, EndpointStructs.EndpointInstructionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveWormholeMessages",
    values: [BytesLike, BytesLike[], BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [
      BigNumberish,
      EndpointStructs.EndpointInstructionStruct,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsWormholeEvmChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsWormholeRelayingEnabled",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWormholeSibling",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "specialRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferEndpointOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPauserCapability",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "wormhole", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wormholeEndpoint_evmChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wormholeRelayer",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "GAS_LIMIT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "consistencyLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeWormholeEndpointInstruction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManagerOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManagerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMigratesImmutables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWormholeSibling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSpecialRelayingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVAAConsumed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWormholeEvmChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWormholeRelayingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "managerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseWormholeEndpointInstruction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteDeliveryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveWormholeMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsWormholeEvmChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsWormholeRelayingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWormholeSibling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "specialRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferEndpointOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPauserCapability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wormhole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wormholeEndpoint_evmChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wormholeRelayer",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NotPausedEvent {
  export type InputTuple = [notPaused: boolean];
  export type OutputTuple = [notPaused: boolean];
  export interface OutputObject {
    notPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [paused: boolean];
  export type OutputTuple = [paused: boolean];
  export interface OutputObject {
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauserTransferredEvent {
  export type InputTuple = [oldPauser: AddressLike, newPauser: AddressLike];
  export type OutputTuple = [oldPauser: string, newPauser: string];
  export interface OutputObject {
    oldPauser: string;
    newPauser: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedMessageEvent {
  export type InputTuple = [
    digest: BytesLike,
    emitterChainId: BigNumberish,
    emitterAddress: BytesLike,
    sequence: BigNumberish
  ];
  export type OutputTuple = [
    digest: string,
    emitterChainId: bigint,
    emitterAddress: string,
    sequence: bigint
  ];
  export interface OutputObject {
    digest: string;
    emitterChainId: bigint;
    emitterAddress: string;
    sequence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedRelayedMessageEvent {
  export type InputTuple = [
    digest: BytesLike,
    emitterChainId: BigNumberish,
    emitterAddress: BytesLike
  ];
  export type OutputTuple = [
    digest: string,
    emitterChainId: bigint,
    emitterAddress: string
  ];
  export interface OutputObject {
    digest: string;
    emitterChainId: bigint;
    emitterAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendEndpointMessageEvent {
  export type InputTuple = [
    recipientChain: BigNumberish,
    message: EndpointStructs.EndpointMessageStruct
  ];
  export type OutputTuple = [
    recipientChain: bigint,
    message: EndpointStructs.EndpointMessageStructOutput
  ];
  export interface OutputObject {
    recipientChain: bigint;
    message: EndpointStructs.EndpointMessageStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetIsSpecialRelayingEnabledEvent {
  export type InputTuple = [chainId: BigNumberish, isRelayingEnabled: boolean];
  export type OutputTuple = [chainId: bigint, isRelayingEnabled: boolean];
  export interface OutputObject {
    chainId: bigint;
    isRelayingEnabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetIsWormholeEvmChainEvent {
  export type InputTuple = [chainId: BigNumberish];
  export type OutputTuple = [chainId: bigint];
  export interface OutputObject {
    chainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetIsWormholeRelayingEnabledEvent {
  export type InputTuple = [chainId: BigNumberish, isRelayingEnabled: boolean];
  export type OutputTuple = [chainId: bigint, isRelayingEnabled: boolean];
  export interface OutputObject {
    chainId: bigint;
    isRelayingEnabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetWormholeSiblingEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    oldSiblingContract: BytesLike,
    siblingContract: BytesLike
  ];
  export type OutputTuple = [
    chainId: bigint,
    oldSiblingContract: string,
    siblingContract: string
  ];
  export interface OutputObject {
    chainId: bigint;
    oldSiblingContract: string;
    siblingContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockWormholeEndpointImmutableAllow extends BaseContract {
  connect(runner?: ContractRunner | null): MockWormholeEndpointImmutableAllow;
  waitForDeployment(): Promise<this>;

  interface: MockWormholeEndpointImmutableAllowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  GAS_LIMIT: TypedContractMethod<[], [bigint], "view">;

  consistencyLevel: TypedContractMethod<[], [bigint], "view">;

  encodeWormholeEndpointInstruction: TypedContractMethod<
    [instruction: WormholeEndpoint.WormholeEndpointInstructionStruct],
    [string],
    "view"
  >;

  getManagerOwner: TypedContractMethod<[], [string], "view">;

  getManagerToken: TypedContractMethod<[], [string], "view">;

  getMigratesImmutables: TypedContractMethod<[], [boolean], "view">;

  getWormholeSibling: TypedContractMethod<
    [chainId: BigNumberish],
    [string],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isPaused: TypedContractMethod<[], [boolean], "view">;

  isSpecialRelayingEnabled: TypedContractMethod<
    [chainId: BigNumberish],
    [boolean],
    "view"
  >;

  isVAAConsumed: TypedContractMethod<[hash: BytesLike], [boolean], "view">;

  isWormholeEvmChain: TypedContractMethod<
    [chainId: BigNumberish],
    [boolean],
    "view"
  >;

  isWormholeRelayingEnabled: TypedContractMethod<
    [chainId: BigNumberish],
    [boolean],
    "view"
  >;

  manager: TypedContractMethod<[], [string], "view">;

  managerToken: TypedContractMethod<[], [string], "view">;

  migrate: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  parseWormholeEndpointInstruction: TypedContractMethod<
    [encoded: BytesLike],
    [WormholeEndpoint.WormholeEndpointInstructionStructOutput],
    "view"
  >;

  pauser: TypedContractMethod<[], [string], "view">;

  quoteDeliveryPrice: TypedContractMethod<
    [
      targetChain: BigNumberish,
      instruction: EndpointStructs.EndpointInstructionStruct
    ],
    [bigint],
    "view"
  >;

  receiveMessage: TypedContractMethod<
    [encodedMessage: BytesLike],
    [void],
    "nonpayable"
  >;

  receiveWormholeMessages: TypedContractMethod<
    [
      payload: BytesLike,
      additionalMessages: BytesLike[],
      sourceAddress: BytesLike,
      sourceChain: BigNumberish,
      deliveryHash: BytesLike
    ],
    [void],
    "payable"
  >;

  sendMessage: TypedContractMethod<
    [
      recipientChain: BigNumberish,
      instruction: EndpointStructs.EndpointInstructionStruct,
      managerMessage: BytesLike,
      recipientManagerAddress: BytesLike
    ],
    [void],
    "payable"
  >;

  setIsWormholeEvmChain: TypedContractMethod<
    [chainId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setIsWormholeRelayingEnabled: TypedContractMethod<
    [chainId: BigNumberish, isEnabled: boolean],
    [void],
    "nonpayable"
  >;

  setWormholeSibling: TypedContractMethod<
    [siblingChainId: BigNumberish, siblingContract: BytesLike],
    [void],
    "nonpayable"
  >;

  specialRelayer: TypedContractMethod<[], [string], "view">;

  transferEndpointOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferPauserCapability: TypedContractMethod<
    [newPauser: AddressLike],
    [void],
    "nonpayable"
  >;

  upgrade: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  wormhole: TypedContractMethod<[], [string], "view">;

  wormholeEndpoint_evmChainId: TypedContractMethod<[], [bigint], "view">;

  wormholeRelayer: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "GAS_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "consistencyLevel"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "encodeWormholeEndpointInstruction"
  ): TypedContractMethod<
    [instruction: WormholeEndpoint.WormholeEndpointInstructionStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getManagerOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getManagerToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMigratesImmutables"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getWormholeSibling"
  ): TypedContractMethod<[chainId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSpecialRelayingEnabled"
  ): TypedContractMethod<[chainId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVAAConsumed"
  ): TypedContractMethod<[hash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWormholeEvmChain"
  ): TypedContractMethod<[chainId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWormholeRelayingEnabled"
  ): TypedContractMethod<[chainId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "manager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "managerToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "migrate"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "parseWormholeEndpointInstruction"
  ): TypedContractMethod<
    [encoded: BytesLike],
    [WormholeEndpoint.WormholeEndpointInstructionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "pauser"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quoteDeliveryPrice"
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      instruction: EndpointStructs.EndpointInstructionStruct
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "receiveMessage"
  ): TypedContractMethod<[encodedMessage: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "receiveWormholeMessages"
  ): TypedContractMethod<
    [
      payload: BytesLike,
      additionalMessages: BytesLike[],
      sourceAddress: BytesLike,
      sourceChain: BigNumberish,
      deliveryHash: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<
    [
      recipientChain: BigNumberish,
      instruction: EndpointStructs.EndpointInstructionStruct,
      managerMessage: BytesLike,
      recipientManagerAddress: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setIsWormholeEvmChain"
  ): TypedContractMethod<[chainId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIsWormholeRelayingEnabled"
  ): TypedContractMethod<
    [chainId: BigNumberish, isEnabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWormholeSibling"
  ): TypedContractMethod<
    [siblingChainId: BigNumberish, siblingContract: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "specialRelayer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferEndpointOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferPauserCapability"
  ): TypedContractMethod<[newPauser: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgrade"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wormhole"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wormholeEndpoint_evmChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "wormholeRelayer"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NotPaused"
  ): TypedContractEvent<
    NotPausedEvent.InputTuple,
    NotPausedEvent.OutputTuple,
    NotPausedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PauserTransferred"
  ): TypedContractEvent<
    PauserTransferredEvent.InputTuple,
    PauserTransferredEvent.OutputTuple,
    PauserTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ReceivedMessage"
  ): TypedContractEvent<
    ReceivedMessageEvent.InputTuple,
    ReceivedMessageEvent.OutputTuple,
    ReceivedMessageEvent.OutputObject
  >;
  getEvent(
    key: "ReceivedRelayedMessage"
  ): TypedContractEvent<
    ReceivedRelayedMessageEvent.InputTuple,
    ReceivedRelayedMessageEvent.OutputTuple,
    ReceivedRelayedMessageEvent.OutputObject
  >;
  getEvent(
    key: "SendEndpointMessage"
  ): TypedContractEvent<
    SendEndpointMessageEvent.InputTuple,
    SendEndpointMessageEvent.OutputTuple,
    SendEndpointMessageEvent.OutputObject
  >;
  getEvent(
    key: "SetIsSpecialRelayingEnabled"
  ): TypedContractEvent<
    SetIsSpecialRelayingEnabledEvent.InputTuple,
    SetIsSpecialRelayingEnabledEvent.OutputTuple,
    SetIsSpecialRelayingEnabledEvent.OutputObject
  >;
  getEvent(
    key: "SetIsWormholeEvmChain"
  ): TypedContractEvent<
    SetIsWormholeEvmChainEvent.InputTuple,
    SetIsWormholeEvmChainEvent.OutputTuple,
    SetIsWormholeEvmChainEvent.OutputObject
  >;
  getEvent(
    key: "SetIsWormholeRelayingEnabled"
  ): TypedContractEvent<
    SetIsWormholeRelayingEnabledEvent.InputTuple,
    SetIsWormholeRelayingEnabledEvent.OutputTuple,
    SetIsWormholeRelayingEnabledEvent.OutputObject
  >;
  getEvent(
    key: "SetWormholeSibling"
  ): TypedContractEvent<
    SetWormholeSiblingEvent.InputTuple,
    SetWormholeSiblingEvent.OutputTuple,
    SetWormholeSiblingEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NotPaused(bool)": TypedContractEvent<
      NotPausedEvent.InputTuple,
      NotPausedEvent.OutputTuple,
      NotPausedEvent.OutputObject
    >;
    NotPaused: TypedContractEvent<
      NotPausedEvent.InputTuple,
      NotPausedEvent.OutputTuple,
      NotPausedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(bool)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PauserTransferred(address,address)": TypedContractEvent<
      PauserTransferredEvent.InputTuple,
      PauserTransferredEvent.OutputTuple,
      PauserTransferredEvent.OutputObject
    >;
    PauserTransferred: TypedContractEvent<
      PauserTransferredEvent.InputTuple,
      PauserTransferredEvent.OutputTuple,
      PauserTransferredEvent.OutputObject
    >;

    "ReceivedMessage(bytes32,uint16,bytes32,uint64)": TypedContractEvent<
      ReceivedMessageEvent.InputTuple,
      ReceivedMessageEvent.OutputTuple,
      ReceivedMessageEvent.OutputObject
    >;
    ReceivedMessage: TypedContractEvent<
      ReceivedMessageEvent.InputTuple,
      ReceivedMessageEvent.OutputTuple,
      ReceivedMessageEvent.OutputObject
    >;

    "ReceivedRelayedMessage(bytes32,uint16,bytes32)": TypedContractEvent<
      ReceivedRelayedMessageEvent.InputTuple,
      ReceivedRelayedMessageEvent.OutputTuple,
      ReceivedRelayedMessageEvent.OutputObject
    >;
    ReceivedRelayedMessage: TypedContractEvent<
      ReceivedRelayedMessageEvent.InputTuple,
      ReceivedRelayedMessageEvent.OutputTuple,
      ReceivedRelayedMessageEvent.OutputObject
    >;

    "SendEndpointMessage(uint16,tuple)": TypedContractEvent<
      SendEndpointMessageEvent.InputTuple,
      SendEndpointMessageEvent.OutputTuple,
      SendEndpointMessageEvent.OutputObject
    >;
    SendEndpointMessage: TypedContractEvent<
      SendEndpointMessageEvent.InputTuple,
      SendEndpointMessageEvent.OutputTuple,
      SendEndpointMessageEvent.OutputObject
    >;

    "SetIsSpecialRelayingEnabled(uint16,bool)": TypedContractEvent<
      SetIsSpecialRelayingEnabledEvent.InputTuple,
      SetIsSpecialRelayingEnabledEvent.OutputTuple,
      SetIsSpecialRelayingEnabledEvent.OutputObject
    >;
    SetIsSpecialRelayingEnabled: TypedContractEvent<
      SetIsSpecialRelayingEnabledEvent.InputTuple,
      SetIsSpecialRelayingEnabledEvent.OutputTuple,
      SetIsSpecialRelayingEnabledEvent.OutputObject
    >;

    "SetIsWormholeEvmChain(uint16)": TypedContractEvent<
      SetIsWormholeEvmChainEvent.InputTuple,
      SetIsWormholeEvmChainEvent.OutputTuple,
      SetIsWormholeEvmChainEvent.OutputObject
    >;
    SetIsWormholeEvmChain: TypedContractEvent<
      SetIsWormholeEvmChainEvent.InputTuple,
      SetIsWormholeEvmChainEvent.OutputTuple,
      SetIsWormholeEvmChainEvent.OutputObject
    >;

    "SetIsWormholeRelayingEnabled(uint16,bool)": TypedContractEvent<
      SetIsWormholeRelayingEnabledEvent.InputTuple,
      SetIsWormholeRelayingEnabledEvent.OutputTuple,
      SetIsWormholeRelayingEnabledEvent.OutputObject
    >;
    SetIsWormholeRelayingEnabled: TypedContractEvent<
      SetIsWormholeRelayingEnabledEvent.InputTuple,
      SetIsWormholeRelayingEnabledEvent.OutputTuple,
      SetIsWormholeRelayingEnabledEvent.OutputObject
    >;

    "SetWormholeSibling(uint16,bytes32,bytes32)": TypedContractEvent<
      SetWormholeSiblingEvent.InputTuple,
      SetWormholeSiblingEvent.OutputTuple,
      SetWormholeSiblingEvent.OutputObject
    >;
    SetWormholeSibling: TypedContractEvent<
      SetWormholeSiblingEvent.InputTuple,
      SetWormholeSiblingEvent.OutputTuple,
      SetWormholeSiblingEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
