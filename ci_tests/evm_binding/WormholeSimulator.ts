/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IWormhole {
  export type SignatureStruct = {
    r: BytesLike;
    s: BytesLike;
    v: BigNumberish;
    guardianIndex: BigNumberish;
  };

  export type SignatureStructOutput = [
    r: string,
    s: string,
    v: bigint,
    guardianIndex: bigint
  ] & { r: string; s: string; v: bigint; guardianIndex: bigint };

  export type VMStruct = {
    version: BigNumberish;
    timestamp: BigNumberish;
    nonce: BigNumberish;
    emitterChainId: BigNumberish;
    emitterAddress: BytesLike;
    sequence: BigNumberish;
    consistencyLevel: BigNumberish;
    payload: BytesLike;
    guardianSetIndex: BigNumberish;
    signatures: IWormhole.SignatureStruct[];
    hash: BytesLike;
  };

  export type VMStructOutput = [
    version: bigint,
    timestamp: bigint,
    nonce: bigint,
    emitterChainId: bigint,
    emitterAddress: string,
    sequence: bigint,
    consistencyLevel: bigint,
    payload: string,
    guardianSetIndex: bigint,
    signatures: IWormhole.SignatureStructOutput[],
    hash: string
  ] & {
    version: bigint;
    timestamp: bigint;
    nonce: bigint;
    emitterChainId: bigint;
    emitterAddress: string;
    sequence: bigint;
    consistencyLevel: bigint;
    payload: string;
    guardianSetIndex: bigint;
    signatures: IWormhole.SignatureStructOutput[];
    hash: string;
  };
}

export declare namespace VmSafe {
  export type LogStruct = {
    topics: BytesLike[];
    data: BytesLike;
    emitter: AddressLike;
  };

  export type LogStructOutput = [
    topics: string[],
    data: string,
    emitter: string
  ] & { topics: string[]; data: string; emitter: string };
}

export interface WormholeSimulatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "encodeAndSignMessage"
      | "encodeObservation"
      | "fetchSignedMessageFromLogs"
      | "fetchWormholeMessageFromLog"
      | "setMessageFee"
      | "vm"
      | "wormhole"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "encodeAndSignMessage",
    values: [IWormhole.VMStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeObservation",
    values: [IWormhole.VMStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchSignedMessageFromLogs",
    values: [VmSafe.LogStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchWormholeMessageFromLog",
    values: [VmSafe.LogStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMessageFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vm", values?: undefined): string;
  encodeFunctionData(functionFragment: "wormhole", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "encodeAndSignMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeObservation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchSignedMessageFromLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchWormholeMessageFromLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMessageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wormhole", data: BytesLike): Result;
}

export interface WormholeSimulator extends BaseContract {
  connect(runner?: ContractRunner | null): WormholeSimulator;
  waitForDeployment(): Promise<this>;

  interface: WormholeSimulatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  encodeAndSignMessage: TypedContractMethod<
    [vm_: IWormhole.VMStruct],
    [string],
    "view"
  >;

  encodeObservation: TypedContractMethod<
    [vm_: IWormhole.VMStruct],
    [string],
    "view"
  >;

  fetchSignedMessageFromLogs: TypedContractMethod<
    [log: VmSafe.LogStruct, emitterChainId: BigNumberish],
    [string],
    "view"
  >;

  fetchWormholeMessageFromLog: TypedContractMethod<
    [logs: VmSafe.LogStruct[]],
    [VmSafe.LogStructOutput[]],
    "view"
  >;

  setMessageFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  vm: TypedContractMethod<[], [string], "view">;

  wormhole: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "encodeAndSignMessage"
  ): TypedContractMethod<[vm_: IWormhole.VMStruct], [string], "view">;
  getFunction(
    nameOrSignature: "encodeObservation"
  ): TypedContractMethod<[vm_: IWormhole.VMStruct], [string], "view">;
  getFunction(
    nameOrSignature: "fetchSignedMessageFromLogs"
  ): TypedContractMethod<
    [log: VmSafe.LogStruct, emitterChainId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "fetchWormholeMessageFromLog"
  ): TypedContractMethod<
    [logs: VmSafe.LogStruct[]],
    [VmSafe.LogStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "setMessageFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(nameOrSignature: "vm"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wormhole"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
