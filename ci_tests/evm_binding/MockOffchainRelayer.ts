/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace VmSafe {
  export type LogStruct = {
    topics: BytesLike[];
    data: BytesLike;
    emitter: AddressLike;
  };

  export type LogStructOutput = [
    topics: string[],
    data: string,
    emitter: string
  ] & { topics: string[]; data: string; emitter: string };
}

export interface MockOffchainRelayerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getPastDeliveryVAA"
      | "getPastEncodedSignedVaas"
      | "registerChain"
      | "relay((bytes32[],bytes,address)[])"
      | "relay((bytes32[],bytes,address)[],bool)"
      | "relay(bytes)"
      | "relay((bytes32[],bytes,address)[],bytes,bool)"
      | "relay()"
      | "vm"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPastDeliveryVAA",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastEncodedSignedVaas",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerChain",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "relay((bytes32[],bytes,address)[])",
    values: [VmSafe.LogStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "relay((bytes32[],bytes,address)[],bool)",
    values: [VmSafe.LogStruct[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "relay(bytes)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "relay((bytes32[],bytes,address)[],bytes,bool)",
    values: [VmSafe.LogStruct[], BytesLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "relay()", values?: undefined): string;
  encodeFunctionData(functionFragment: "vm", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getPastDeliveryVAA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastEncodedSignedVaas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relay((bytes32[],bytes,address)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relay((bytes32[],bytes,address)[],bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relay(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relay((bytes32[],bytes,address)[],bytes,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relay()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vm", data: BytesLike): Result;
}

export interface MockOffchainRelayer extends BaseContract {
  connect(runner?: ContractRunner | null): MockOffchainRelayer;
  waitForDeployment(): Promise<this>;

  interface: MockOffchainRelayerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPastDeliveryVAA: TypedContractMethod<
    [chainId: BigNumberish, deliveryVAASequence: BigNumberish],
    [string],
    "view"
  >;

  getPastEncodedSignedVaas: TypedContractMethod<
    [chainId: BigNumberish, deliveryVAASequence: BigNumberish],
    [string[]],
    "view"
  >;

  registerChain: TypedContractMethod<
    [
      chainId: BigNumberish,
      wormholeRelayerContractAddress: AddressLike,
      fork: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  "relay((bytes32[],bytes,address)[])": TypedContractMethod<
    [logs: VmSafe.LogStruct[]],
    [void],
    "nonpayable"
  >;

  "relay((bytes32[],bytes,address)[],bool)": TypedContractMethod<
    [logs: VmSafe.LogStruct[], debugLogging: boolean],
    [void],
    "nonpayable"
  >;

  "relay(bytes)": TypedContractMethod<
    [deliveryOverrides: BytesLike],
    [void],
    "nonpayable"
  >;

  "relay((bytes32[],bytes,address)[],bytes,bool)": TypedContractMethod<
    [
      logs: VmSafe.LogStruct[],
      deliveryOverrides: BytesLike,
      debugLogging: boolean
    ],
    [void],
    "nonpayable"
  >;

  "relay()": TypedContractMethod<[], [void], "nonpayable">;

  vm: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPastDeliveryVAA"
  ): TypedContractMethod<
    [chainId: BigNumberish, deliveryVAASequence: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPastEncodedSignedVaas"
  ): TypedContractMethod<
    [chainId: BigNumberish, deliveryVAASequence: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerChain"
  ): TypedContractMethod<
    [
      chainId: BigNumberish,
      wormholeRelayerContractAddress: AddressLike,
      fork: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "relay((bytes32[],bytes,address)[])"
  ): TypedContractMethod<[logs: VmSafe.LogStruct[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "relay((bytes32[],bytes,address)[],bool)"
  ): TypedContractMethod<
    [logs: VmSafe.LogStruct[], debugLogging: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "relay(bytes)"
  ): TypedContractMethod<[deliveryOverrides: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "relay((bytes32[],bytes,address)[],bytes,bool)"
  ): TypedContractMethod<
    [
      logs: VmSafe.LogStruct[],
      deliveryOverrides: BytesLike,
      debugLogging: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "relay()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(nameOrSignature: "vm"): TypedContractMethod<[], [string], "view">;

  filters: {};
}
