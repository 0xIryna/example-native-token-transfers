/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Governance {
  export type GeneralPurposeGovernanceMessageStruct = {
    action: BigNumberish;
    chain: BigNumberish;
    governanceContract: AddressLike;
    governedContract: AddressLike;
    callData: BytesLike;
  };

  export type GeneralPurposeGovernanceMessageStructOutput = [
    action: bigint,
    chain: bigint,
    governanceContract: string,
    governedContract: string,
    callData: string
  ] & {
    action: bigint;
    chain: bigint;
    governanceContract: string;
    governedContract: string;
    callData: string;
  };
}

export interface GovernanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MODULE"
      | "encodeGeneralPurposeGovernanceMessage"
      | "parseGeneralPurposeGovernanceMessage"
      | "performGovernance"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MODULE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "encodeGeneralPurposeGovernanceMessage",
    values: [Governance.GeneralPurposeGovernanceMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "parseGeneralPurposeGovernanceMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "performGovernance",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "MODULE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encodeGeneralPurposeGovernanceMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseGeneralPurposeGovernanceMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performGovernance",
    data: BytesLike
  ): Result;
}

export interface Governance extends BaseContract {
  connect(runner?: ContractRunner | null): Governance;
  waitForDeployment(): Promise<this>;

  interface: GovernanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MODULE: TypedContractMethod<[], [string], "view">;

  encodeGeneralPurposeGovernanceMessage: TypedContractMethod<
    [m: Governance.GeneralPurposeGovernanceMessageStruct],
    [string],
    "view"
  >;

  parseGeneralPurposeGovernanceMessage: TypedContractMethod<
    [encoded: BytesLike],
    [Governance.GeneralPurposeGovernanceMessageStructOutput],
    "view"
  >;

  performGovernance: TypedContractMethod<
    [vaa: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MODULE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "encodeGeneralPurposeGovernanceMessage"
  ): TypedContractMethod<
    [m: Governance.GeneralPurposeGovernanceMessageStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "parseGeneralPurposeGovernanceMessage"
  ): TypedContractMethod<
    [encoded: BytesLike],
    [Governance.GeneralPurposeGovernanceMessageStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "performGovernance"
  ): TypedContractMethod<[vaa: BytesLike], [void], "nonpayable">;

  filters: {};
}
