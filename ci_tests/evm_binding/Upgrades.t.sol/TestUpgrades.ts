/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace StdInvariant {
  export type FuzzSelectorStruct = {
    addr: AddressLike;
    selectors: BytesLike[];
  };

  export type FuzzSelectorStructOutput = [addr: string, selectors: string[]] & {
    addr: string;
    selectors: string[];
  };

  export type FuzzInterfaceStruct = { addr: AddressLike; artifacts: string[] };

  export type FuzzInterfaceStructOutput = [
    addr: string,
    artifacts: string[]
  ] & { addr: string; artifacts: string[] };
}

export interface TestUpgradesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "IS_TEST"
      | "basicFunctionality"
      | "encodeEndpointInstruction"
      | "excludeArtifacts"
      | "excludeContracts"
      | "excludeSenders"
      | "failed"
      | "setUp"
      | "targetArtifactSelectors"
      | "targetArtifacts"
      | "targetContracts"
      | "targetInterfaces"
      | "targetSelectors"
      | "targetSenders"
      | "test_authEndpoint"
      | "test_authManager"
      | "test_basicUpgradeEndpoint"
      | "test_basicUpgradeManager"
      | "test_callMigrateEndpoint"
      | "test_callMigrateManager"
      | "test_doubleUpgradeEndpoint"
      | "test_doubleUpgradeManager"
      | "test_immutableBlockUpdateFailureEndpoint"
      | "test_immutableBlockUpdateFailureManager"
      | "test_immutableBlockUpdateSuccessEndpoint"
      | "test_immutableBlockUpdateSuccessManager"
      | "test_storageSlotEndpoint"
      | "test_storageSlotManager"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EndpointAdded"
      | "EndpointRemoved"
      | "InboundTransferQueued"
      | "MessageAlreadyExecuted"
      | "MessageAttestedTo"
      | "OutboundTransferQueued"
      | "OutboundTransferRateLimited"
      | "SiblingUpdated"
      | "ThresholdChanged"
      | "TransferRedeemed"
      | "TransferSent"
      | "log"
      | "log_address"
      | "log_array(uint256[])"
      | "log_array(int256[])"
      | "log_array(address[])"
      | "log_bytes"
      | "log_bytes32"
      | "log_int"
      | "log_named_address"
      | "log_named_array(string,uint256[])"
      | "log_named_array(string,int256[])"
      | "log_named_array(string,address[])"
      | "log_named_bytes"
      | "log_named_bytes32"
      | "log_named_decimal_int"
      | "log_named_decimal_uint"
      | "log_named_int"
      | "log_named_string"
      | "log_named_uint"
      | "log_string"
      | "log_uint"
      | "logs"
  ): EventFragment;

  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "basicFunctionality",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encodeEndpointInstruction",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeSenders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetArtifactSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetInterfaces",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_authEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_authManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_basicUpgradeEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_basicUpgradeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_callMigrateEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_callMigrateManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_doubleUpgradeEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_doubleUpgradeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_immutableBlockUpdateFailureEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_immutableBlockUpdateFailureManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_immutableBlockUpdateSuccessEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_immutableBlockUpdateSuccessManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_storageSlotEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_storageSlotManager",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "basicFunctionality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeEndpointInstruction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifactSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_authEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_authManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_basicUpgradeEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_basicUpgradeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_callMigrateEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_callMigrateManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_doubleUpgradeEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_doubleUpgradeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_immutableBlockUpdateFailureEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_immutableBlockUpdateFailureManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_immutableBlockUpdateSuccessEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_immutableBlockUpdateSuccessManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_storageSlotEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_storageSlotManager",
    data: BytesLike
  ): Result;
}

export namespace EndpointAddedEvent {
  export type InputTuple = [
    endpoint: AddressLike,
    endpointsNum: BigNumberish,
    threshold: BigNumberish
  ];
  export type OutputTuple = [
    endpoint: string,
    endpointsNum: bigint,
    threshold: bigint
  ];
  export interface OutputObject {
    endpoint: string;
    endpointsNum: bigint;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EndpointRemovedEvent {
  export type InputTuple = [endpoint: AddressLike, threshold: BigNumberish];
  export type OutputTuple = [endpoint: string, threshold: bigint];
  export interface OutputObject {
    endpoint: string;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InboundTransferQueuedEvent {
  export type InputTuple = [digest: BytesLike];
  export type OutputTuple = [digest: string];
  export interface OutputObject {
    digest: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageAlreadyExecutedEvent {
  export type InputTuple = [sourceManager: BytesLike, msgHash: BytesLike];
  export type OutputTuple = [sourceManager: string, msgHash: string];
  export interface OutputObject {
    sourceManager: string;
    msgHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageAttestedToEvent {
  export type InputTuple = [
    digest: BytesLike,
    endpoint: AddressLike,
    index: BigNumberish
  ];
  export type OutputTuple = [digest: string, endpoint: string, index: bigint];
  export interface OutputObject {
    digest: string;
    endpoint: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OutboundTransferQueuedEvent {
  export type InputTuple = [queueSequence: BigNumberish];
  export type OutputTuple = [queueSequence: bigint];
  export interface OutputObject {
    queueSequence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OutboundTransferRateLimitedEvent {
  export type InputTuple = [
    sender: AddressLike,
    sequence: BigNumberish,
    amount: BigNumberish,
    currentCapacity: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    sequence: bigint,
    amount: bigint,
    currentCapacity: bigint
  ];
  export interface OutputObject {
    sender: string;
    sequence: bigint;
    amount: bigint;
    currentCapacity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SiblingUpdatedEvent {
  export type InputTuple = [
    chainId_: BigNumberish,
    oldSiblingContract: BytesLike,
    siblingContract: BytesLike
  ];
  export type OutputTuple = [
    chainId_: bigint,
    oldSiblingContract: string,
    siblingContract: string
  ];
  export interface OutputObject {
    chainId_: bigint;
    oldSiblingContract: string;
    siblingContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ThresholdChangedEvent {
  export type InputTuple = [
    oldThreshold: BigNumberish,
    threshold: BigNumberish
  ];
  export type OutputTuple = [oldThreshold: bigint, threshold: bigint];
  export interface OutputObject {
    oldThreshold: bigint;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferRedeemedEvent {
  export type InputTuple = [digest: BytesLike];
  export type OutputTuple = [digest: string];
  export interface OutputObject {
    digest: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSentEvent {
  export type InputTuple = [
    recipient: BytesLike,
    amount: BigNumberish,
    recipientChain: BigNumberish,
    msgSequence: BigNumberish
  ];
  export type OutputTuple = [
    recipient: string,
    amount: bigint,
    recipientChain: bigint,
    msgSequence: bigint
  ];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
    recipientChain: bigint;
    msgSequence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace logEvent {
  export type InputTuple = [arg0: string];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_addressEvent {
  export type InputTuple = [arg0: AddressLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_array_uint256_array_Event {
  export type InputTuple = [val: BigNumberish[]];
  export type OutputTuple = [val: bigint[]];
  export interface OutputObject {
    val: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_array_int256_array_Event {
  export type InputTuple = [val: BigNumberish[]];
  export type OutputTuple = [val: bigint[]];
  export interface OutputObject {
    val: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_array_address_array_Event {
  export type InputTuple = [val: AddressLike[]];
  export type OutputTuple = [val: string[]];
  export interface OutputObject {
    val: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_bytesEvent {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_bytes32Event {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_intEvent {
  export type InputTuple = [arg0: BigNumberish];
  export type OutputTuple = [arg0: bigint];
  export interface OutputObject {
    arg0: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_addressEvent {
  export type InputTuple = [key: string, val: AddressLike];
  export type OutputTuple = [key: string, val: string];
  export interface OutputObject {
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_array_string_uint256_array_Event {
  export type InputTuple = [key: string, val: BigNumberish[]];
  export type OutputTuple = [key: string, val: bigint[]];
  export interface OutputObject {
    key: string;
    val: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_array_string_int256_array_Event {
  export type InputTuple = [key: string, val: BigNumberish[]];
  export type OutputTuple = [key: string, val: bigint[]];
  export interface OutputObject {
    key: string;
    val: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_array_string_address_array_Event {
  export type InputTuple = [key: string, val: AddressLike[]];
  export type OutputTuple = [key: string, val: string[]];
  export interface OutputObject {
    key: string;
    val: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_bytesEvent {
  export type InputTuple = [key: string, val: BytesLike];
  export type OutputTuple = [key: string, val: string];
  export interface OutputObject {
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_bytes32Event {
  export type InputTuple = [key: string, val: BytesLike];
  export type OutputTuple = [key: string, val: string];
  export interface OutputObject {
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_decimal_intEvent {
  export type InputTuple = [
    key: string,
    val: BigNumberish,
    decimals: BigNumberish
  ];
  export type OutputTuple = [key: string, val: bigint, decimals: bigint];
  export interface OutputObject {
    key: string;
    val: bigint;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_decimal_uintEvent {
  export type InputTuple = [
    key: string,
    val: BigNumberish,
    decimals: BigNumberish
  ];
  export type OutputTuple = [key: string, val: bigint, decimals: bigint];
  export interface OutputObject {
    key: string;
    val: bigint;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_intEvent {
  export type InputTuple = [key: string, val: BigNumberish];
  export type OutputTuple = [key: string, val: bigint];
  export interface OutputObject {
    key: string;
    val: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_stringEvent {
  export type InputTuple = [key: string, val: string];
  export type OutputTuple = [key: string, val: string];
  export interface OutputObject {
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_uintEvent {
  export type InputTuple = [key: string, val: BigNumberish];
  export type OutputTuple = [key: string, val: bigint];
  export interface OutputObject {
    key: string;
    val: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_stringEvent {
  export type InputTuple = [arg0: string];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_uintEvent {
  export type InputTuple = [arg0: BigNumberish];
  export type OutputTuple = [arg0: bigint];
  export interface OutputObject {
    arg0: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace logsEvent {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TestUpgrades extends BaseContract {
  connect(runner?: ContractRunner | null): TestUpgrades;
  waitForDeployment(): Promise<this>;

  interface: TestUpgradesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  IS_TEST: TypedContractMethod<[], [boolean], "view">;

  basicFunctionality: TypedContractMethod<[], [void], "nonpayable">;

  encodeEndpointInstruction: TypedContractMethod<
    [relayer_off: boolean],
    [string],
    "view"
  >;

  excludeArtifacts: TypedContractMethod<[], [string[]], "view">;

  excludeContracts: TypedContractMethod<[], [string[]], "view">;

  excludeSenders: TypedContractMethod<[], [string[]], "view">;

  failed: TypedContractMethod<[], [boolean], "nonpayable">;

  setUp: TypedContractMethod<[], [void], "nonpayable">;

  targetArtifactSelectors: TypedContractMethod<
    [],
    [StdInvariant.FuzzSelectorStructOutput[]],
    "view"
  >;

  targetArtifacts: TypedContractMethod<[], [string[]], "view">;

  targetContracts: TypedContractMethod<[], [string[]], "view">;

  targetInterfaces: TypedContractMethod<
    [],
    [StdInvariant.FuzzInterfaceStructOutput[]],
    "view"
  >;

  targetSelectors: TypedContractMethod<
    [],
    [StdInvariant.FuzzSelectorStructOutput[]],
    "view"
  >;

  targetSenders: TypedContractMethod<[], [string[]], "view">;

  test_authEndpoint: TypedContractMethod<[], [void], "nonpayable">;

  test_authManager: TypedContractMethod<[], [void], "nonpayable">;

  test_basicUpgradeEndpoint: TypedContractMethod<[], [void], "nonpayable">;

  test_basicUpgradeManager: TypedContractMethod<[], [void], "nonpayable">;

  test_callMigrateEndpoint: TypedContractMethod<[], [void], "nonpayable">;

  test_callMigrateManager: TypedContractMethod<[], [void], "nonpayable">;

  test_doubleUpgradeEndpoint: TypedContractMethod<[], [void], "nonpayable">;

  test_doubleUpgradeManager: TypedContractMethod<[], [void], "nonpayable">;

  test_immutableBlockUpdateFailureEndpoint: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  test_immutableBlockUpdateFailureManager: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  test_immutableBlockUpdateSuccessEndpoint: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  test_immutableBlockUpdateSuccessManager: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  test_storageSlotEndpoint: TypedContractMethod<[], [void], "nonpayable">;

  test_storageSlotManager: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "IS_TEST"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "basicFunctionality"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "encodeEndpointInstruction"
  ): TypedContractMethod<[relayer_off: boolean], [string], "view">;
  getFunction(
    nameOrSignature: "excludeArtifacts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "excludeContracts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "excludeSenders"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "failed"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setUp"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "targetArtifactSelectors"
  ): TypedContractMethod<[], [StdInvariant.FuzzSelectorStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "targetArtifacts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "targetContracts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "targetInterfaces"
  ): TypedContractMethod<
    [],
    [StdInvariant.FuzzInterfaceStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "targetSelectors"
  ): TypedContractMethod<[], [StdInvariant.FuzzSelectorStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "targetSenders"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "test_authEndpoint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_authManager"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_basicUpgradeEndpoint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_basicUpgradeManager"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_callMigrateEndpoint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_callMigrateManager"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_doubleUpgradeEndpoint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_doubleUpgradeManager"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_immutableBlockUpdateFailureEndpoint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_immutableBlockUpdateFailureManager"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_immutableBlockUpdateSuccessEndpoint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_immutableBlockUpdateSuccessManager"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_storageSlotEndpoint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "test_storageSlotManager"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "EndpointAdded"
  ): TypedContractEvent<
    EndpointAddedEvent.InputTuple,
    EndpointAddedEvent.OutputTuple,
    EndpointAddedEvent.OutputObject
  >;
  getEvent(
    key: "EndpointRemoved"
  ): TypedContractEvent<
    EndpointRemovedEvent.InputTuple,
    EndpointRemovedEvent.OutputTuple,
    EndpointRemovedEvent.OutputObject
  >;
  getEvent(
    key: "InboundTransferQueued"
  ): TypedContractEvent<
    InboundTransferQueuedEvent.InputTuple,
    InboundTransferQueuedEvent.OutputTuple,
    InboundTransferQueuedEvent.OutputObject
  >;
  getEvent(
    key: "MessageAlreadyExecuted"
  ): TypedContractEvent<
    MessageAlreadyExecutedEvent.InputTuple,
    MessageAlreadyExecutedEvent.OutputTuple,
    MessageAlreadyExecutedEvent.OutputObject
  >;
  getEvent(
    key: "MessageAttestedTo"
  ): TypedContractEvent<
    MessageAttestedToEvent.InputTuple,
    MessageAttestedToEvent.OutputTuple,
    MessageAttestedToEvent.OutputObject
  >;
  getEvent(
    key: "OutboundTransferQueued"
  ): TypedContractEvent<
    OutboundTransferQueuedEvent.InputTuple,
    OutboundTransferQueuedEvent.OutputTuple,
    OutboundTransferQueuedEvent.OutputObject
  >;
  getEvent(
    key: "OutboundTransferRateLimited"
  ): TypedContractEvent<
    OutboundTransferRateLimitedEvent.InputTuple,
    OutboundTransferRateLimitedEvent.OutputTuple,
    OutboundTransferRateLimitedEvent.OutputObject
  >;
  getEvent(
    key: "SiblingUpdated"
  ): TypedContractEvent<
    SiblingUpdatedEvent.InputTuple,
    SiblingUpdatedEvent.OutputTuple,
    SiblingUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ThresholdChanged"
  ): TypedContractEvent<
    ThresholdChangedEvent.InputTuple,
    ThresholdChangedEvent.OutputTuple,
    ThresholdChangedEvent.OutputObject
  >;
  getEvent(
    key: "TransferRedeemed"
  ): TypedContractEvent<
    TransferRedeemedEvent.InputTuple,
    TransferRedeemedEvent.OutputTuple,
    TransferRedeemedEvent.OutputObject
  >;
  getEvent(
    key: "TransferSent"
  ): TypedContractEvent<
    TransferSentEvent.InputTuple,
    TransferSentEvent.OutputTuple,
    TransferSentEvent.OutputObject
  >;
  getEvent(
    key: "log"
  ): TypedContractEvent<
    logEvent.InputTuple,
    logEvent.OutputTuple,
    logEvent.OutputObject
  >;
  getEvent(
    key: "log_address"
  ): TypedContractEvent<
    log_addressEvent.InputTuple,
    log_addressEvent.OutputTuple,
    log_addressEvent.OutputObject
  >;
  getEvent(
    key: "log_array(uint256[])"
  ): TypedContractEvent<
    log_array_uint256_array_Event.InputTuple,
    log_array_uint256_array_Event.OutputTuple,
    log_array_uint256_array_Event.OutputObject
  >;
  getEvent(
    key: "log_array(int256[])"
  ): TypedContractEvent<
    log_array_int256_array_Event.InputTuple,
    log_array_int256_array_Event.OutputTuple,
    log_array_int256_array_Event.OutputObject
  >;
  getEvent(
    key: "log_array(address[])"
  ): TypedContractEvent<
    log_array_address_array_Event.InputTuple,
    log_array_address_array_Event.OutputTuple,
    log_array_address_array_Event.OutputObject
  >;
  getEvent(
    key: "log_bytes"
  ): TypedContractEvent<
    log_bytesEvent.InputTuple,
    log_bytesEvent.OutputTuple,
    log_bytesEvent.OutputObject
  >;
  getEvent(
    key: "log_bytes32"
  ): TypedContractEvent<
    log_bytes32Event.InputTuple,
    log_bytes32Event.OutputTuple,
    log_bytes32Event.OutputObject
  >;
  getEvent(
    key: "log_int"
  ): TypedContractEvent<
    log_intEvent.InputTuple,
    log_intEvent.OutputTuple,
    log_intEvent.OutputObject
  >;
  getEvent(
    key: "log_named_address"
  ): TypedContractEvent<
    log_named_addressEvent.InputTuple,
    log_named_addressEvent.OutputTuple,
    log_named_addressEvent.OutputObject
  >;
  getEvent(
    key: "log_named_array(string,uint256[])"
  ): TypedContractEvent<
    log_named_array_string_uint256_array_Event.InputTuple,
    log_named_array_string_uint256_array_Event.OutputTuple,
    log_named_array_string_uint256_array_Event.OutputObject
  >;
  getEvent(
    key: "log_named_array(string,int256[])"
  ): TypedContractEvent<
    log_named_array_string_int256_array_Event.InputTuple,
    log_named_array_string_int256_array_Event.OutputTuple,
    log_named_array_string_int256_array_Event.OutputObject
  >;
  getEvent(
    key: "log_named_array(string,address[])"
  ): TypedContractEvent<
    log_named_array_string_address_array_Event.InputTuple,
    log_named_array_string_address_array_Event.OutputTuple,
    log_named_array_string_address_array_Event.OutputObject
  >;
  getEvent(
    key: "log_named_bytes"
  ): TypedContractEvent<
    log_named_bytesEvent.InputTuple,
    log_named_bytesEvent.OutputTuple,
    log_named_bytesEvent.OutputObject
  >;
  getEvent(
    key: "log_named_bytes32"
  ): TypedContractEvent<
    log_named_bytes32Event.InputTuple,
    log_named_bytes32Event.OutputTuple,
    log_named_bytes32Event.OutputObject
  >;
  getEvent(
    key: "log_named_decimal_int"
  ): TypedContractEvent<
    log_named_decimal_intEvent.InputTuple,
    log_named_decimal_intEvent.OutputTuple,
    log_named_decimal_intEvent.OutputObject
  >;
  getEvent(
    key: "log_named_decimal_uint"
  ): TypedContractEvent<
    log_named_decimal_uintEvent.InputTuple,
    log_named_decimal_uintEvent.OutputTuple,
    log_named_decimal_uintEvent.OutputObject
  >;
  getEvent(
    key: "log_named_int"
  ): TypedContractEvent<
    log_named_intEvent.InputTuple,
    log_named_intEvent.OutputTuple,
    log_named_intEvent.OutputObject
  >;
  getEvent(
    key: "log_named_string"
  ): TypedContractEvent<
    log_named_stringEvent.InputTuple,
    log_named_stringEvent.OutputTuple,
    log_named_stringEvent.OutputObject
  >;
  getEvent(
    key: "log_named_uint"
  ): TypedContractEvent<
    log_named_uintEvent.InputTuple,
    log_named_uintEvent.OutputTuple,
    log_named_uintEvent.OutputObject
  >;
  getEvent(
    key: "log_string"
  ): TypedContractEvent<
    log_stringEvent.InputTuple,
    log_stringEvent.OutputTuple,
    log_stringEvent.OutputObject
  >;
  getEvent(
    key: "log_uint"
  ): TypedContractEvent<
    log_uintEvent.InputTuple,
    log_uintEvent.OutputTuple,
    log_uintEvent.OutputObject
  >;
  getEvent(
    key: "logs"
  ): TypedContractEvent<
    logsEvent.InputTuple,
    logsEvent.OutputTuple,
    logsEvent.OutputObject
  >;

  filters: {
    "EndpointAdded(address,uint256,uint8)": TypedContractEvent<
      EndpointAddedEvent.InputTuple,
      EndpointAddedEvent.OutputTuple,
      EndpointAddedEvent.OutputObject
    >;
    EndpointAdded: TypedContractEvent<
      EndpointAddedEvent.InputTuple,
      EndpointAddedEvent.OutputTuple,
      EndpointAddedEvent.OutputObject
    >;

    "EndpointRemoved(address,uint8)": TypedContractEvent<
      EndpointRemovedEvent.InputTuple,
      EndpointRemovedEvent.OutputTuple,
      EndpointRemovedEvent.OutputObject
    >;
    EndpointRemoved: TypedContractEvent<
      EndpointRemovedEvent.InputTuple,
      EndpointRemovedEvent.OutputTuple,
      EndpointRemovedEvent.OutputObject
    >;

    "InboundTransferQueued(bytes32)": TypedContractEvent<
      InboundTransferQueuedEvent.InputTuple,
      InboundTransferQueuedEvent.OutputTuple,
      InboundTransferQueuedEvent.OutputObject
    >;
    InboundTransferQueued: TypedContractEvent<
      InboundTransferQueuedEvent.InputTuple,
      InboundTransferQueuedEvent.OutputTuple,
      InboundTransferQueuedEvent.OutputObject
    >;

    "MessageAlreadyExecuted(bytes32,bytes32)": TypedContractEvent<
      MessageAlreadyExecutedEvent.InputTuple,
      MessageAlreadyExecutedEvent.OutputTuple,
      MessageAlreadyExecutedEvent.OutputObject
    >;
    MessageAlreadyExecuted: TypedContractEvent<
      MessageAlreadyExecutedEvent.InputTuple,
      MessageAlreadyExecutedEvent.OutputTuple,
      MessageAlreadyExecutedEvent.OutputObject
    >;

    "MessageAttestedTo(bytes32,address,uint8)": TypedContractEvent<
      MessageAttestedToEvent.InputTuple,
      MessageAttestedToEvent.OutputTuple,
      MessageAttestedToEvent.OutputObject
    >;
    MessageAttestedTo: TypedContractEvent<
      MessageAttestedToEvent.InputTuple,
      MessageAttestedToEvent.OutputTuple,
      MessageAttestedToEvent.OutputObject
    >;

    "OutboundTransferQueued(uint64)": TypedContractEvent<
      OutboundTransferQueuedEvent.InputTuple,
      OutboundTransferQueuedEvent.OutputTuple,
      OutboundTransferQueuedEvent.OutputObject
    >;
    OutboundTransferQueued: TypedContractEvent<
      OutboundTransferQueuedEvent.InputTuple,
      OutboundTransferQueuedEvent.OutputTuple,
      OutboundTransferQueuedEvent.OutputObject
    >;

    "OutboundTransferRateLimited(address,uint64,uint256,uint256)": TypedContractEvent<
      OutboundTransferRateLimitedEvent.InputTuple,
      OutboundTransferRateLimitedEvent.OutputTuple,
      OutboundTransferRateLimitedEvent.OutputObject
    >;
    OutboundTransferRateLimited: TypedContractEvent<
      OutboundTransferRateLimitedEvent.InputTuple,
      OutboundTransferRateLimitedEvent.OutputTuple,
      OutboundTransferRateLimitedEvent.OutputObject
    >;

    "SiblingUpdated(uint16,bytes32,bytes32)": TypedContractEvent<
      SiblingUpdatedEvent.InputTuple,
      SiblingUpdatedEvent.OutputTuple,
      SiblingUpdatedEvent.OutputObject
    >;
    SiblingUpdated: TypedContractEvent<
      SiblingUpdatedEvent.InputTuple,
      SiblingUpdatedEvent.OutputTuple,
      SiblingUpdatedEvent.OutputObject
    >;

    "ThresholdChanged(uint8,uint8)": TypedContractEvent<
      ThresholdChangedEvent.InputTuple,
      ThresholdChangedEvent.OutputTuple,
      ThresholdChangedEvent.OutputObject
    >;
    ThresholdChanged: TypedContractEvent<
      ThresholdChangedEvent.InputTuple,
      ThresholdChangedEvent.OutputTuple,
      ThresholdChangedEvent.OutputObject
    >;

    "TransferRedeemed(bytes32)": TypedContractEvent<
      TransferRedeemedEvent.InputTuple,
      TransferRedeemedEvent.OutputTuple,
      TransferRedeemedEvent.OutputObject
    >;
    TransferRedeemed: TypedContractEvent<
      TransferRedeemedEvent.InputTuple,
      TransferRedeemedEvent.OutputTuple,
      TransferRedeemedEvent.OutputObject
    >;

    "TransferSent(bytes32,uint256,uint16,uint64)": TypedContractEvent<
      TransferSentEvent.InputTuple,
      TransferSentEvent.OutputTuple,
      TransferSentEvent.OutputObject
    >;
    TransferSent: TypedContractEvent<
      TransferSentEvent.InputTuple,
      TransferSentEvent.OutputTuple,
      TransferSentEvent.OutputObject
    >;

    "log(string)": TypedContractEvent<
      logEvent.InputTuple,
      logEvent.OutputTuple,
      logEvent.OutputObject
    >;
    log: TypedContractEvent<
      logEvent.InputTuple,
      logEvent.OutputTuple,
      logEvent.OutputObject
    >;

    "log_address(address)": TypedContractEvent<
      log_addressEvent.InputTuple,
      log_addressEvent.OutputTuple,
      log_addressEvent.OutputObject
    >;
    log_address: TypedContractEvent<
      log_addressEvent.InputTuple,
      log_addressEvent.OutputTuple,
      log_addressEvent.OutputObject
    >;

    "log_array(uint256[])": TypedContractEvent<
      log_array_uint256_array_Event.InputTuple,
      log_array_uint256_array_Event.OutputTuple,
      log_array_uint256_array_Event.OutputObject
    >;
    "log_array(int256[])": TypedContractEvent<
      log_array_int256_array_Event.InputTuple,
      log_array_int256_array_Event.OutputTuple,
      log_array_int256_array_Event.OutputObject
    >;
    "log_array(address[])": TypedContractEvent<
      log_array_address_array_Event.InputTuple,
      log_array_address_array_Event.OutputTuple,
      log_array_address_array_Event.OutputObject
    >;

    "log_bytes(bytes)": TypedContractEvent<
      log_bytesEvent.InputTuple,
      log_bytesEvent.OutputTuple,
      log_bytesEvent.OutputObject
    >;
    log_bytes: TypedContractEvent<
      log_bytesEvent.InputTuple,
      log_bytesEvent.OutputTuple,
      log_bytesEvent.OutputObject
    >;

    "log_bytes32(bytes32)": TypedContractEvent<
      log_bytes32Event.InputTuple,
      log_bytes32Event.OutputTuple,
      log_bytes32Event.OutputObject
    >;
    log_bytes32: TypedContractEvent<
      log_bytes32Event.InputTuple,
      log_bytes32Event.OutputTuple,
      log_bytes32Event.OutputObject
    >;

    "log_int(int256)": TypedContractEvent<
      log_intEvent.InputTuple,
      log_intEvent.OutputTuple,
      log_intEvent.OutputObject
    >;
    log_int: TypedContractEvent<
      log_intEvent.InputTuple,
      log_intEvent.OutputTuple,
      log_intEvent.OutputObject
    >;

    "log_named_address(string,address)": TypedContractEvent<
      log_named_addressEvent.InputTuple,
      log_named_addressEvent.OutputTuple,
      log_named_addressEvent.OutputObject
    >;
    log_named_address: TypedContractEvent<
      log_named_addressEvent.InputTuple,
      log_named_addressEvent.OutputTuple,
      log_named_addressEvent.OutputObject
    >;

    "log_named_array(string,uint256[])": TypedContractEvent<
      log_named_array_string_uint256_array_Event.InputTuple,
      log_named_array_string_uint256_array_Event.OutputTuple,
      log_named_array_string_uint256_array_Event.OutputObject
    >;
    "log_named_array(string,int256[])": TypedContractEvent<
      log_named_array_string_int256_array_Event.InputTuple,
      log_named_array_string_int256_array_Event.OutputTuple,
      log_named_array_string_int256_array_Event.OutputObject
    >;
    "log_named_array(string,address[])": TypedContractEvent<
      log_named_array_string_address_array_Event.InputTuple,
      log_named_array_string_address_array_Event.OutputTuple,
      log_named_array_string_address_array_Event.OutputObject
    >;

    "log_named_bytes(string,bytes)": TypedContractEvent<
      log_named_bytesEvent.InputTuple,
      log_named_bytesEvent.OutputTuple,
      log_named_bytesEvent.OutputObject
    >;
    log_named_bytes: TypedContractEvent<
      log_named_bytesEvent.InputTuple,
      log_named_bytesEvent.OutputTuple,
      log_named_bytesEvent.OutputObject
    >;

    "log_named_bytes32(string,bytes32)": TypedContractEvent<
      log_named_bytes32Event.InputTuple,
      log_named_bytes32Event.OutputTuple,
      log_named_bytes32Event.OutputObject
    >;
    log_named_bytes32: TypedContractEvent<
      log_named_bytes32Event.InputTuple,
      log_named_bytes32Event.OutputTuple,
      log_named_bytes32Event.OutputObject
    >;

    "log_named_decimal_int(string,int256,uint256)": TypedContractEvent<
      log_named_decimal_intEvent.InputTuple,
      log_named_decimal_intEvent.OutputTuple,
      log_named_decimal_intEvent.OutputObject
    >;
    log_named_decimal_int: TypedContractEvent<
      log_named_decimal_intEvent.InputTuple,
      log_named_decimal_intEvent.OutputTuple,
      log_named_decimal_intEvent.OutputObject
    >;

    "log_named_decimal_uint(string,uint256,uint256)": TypedContractEvent<
      log_named_decimal_uintEvent.InputTuple,
      log_named_decimal_uintEvent.OutputTuple,
      log_named_decimal_uintEvent.OutputObject
    >;
    log_named_decimal_uint: TypedContractEvent<
      log_named_decimal_uintEvent.InputTuple,
      log_named_decimal_uintEvent.OutputTuple,
      log_named_decimal_uintEvent.OutputObject
    >;

    "log_named_int(string,int256)": TypedContractEvent<
      log_named_intEvent.InputTuple,
      log_named_intEvent.OutputTuple,
      log_named_intEvent.OutputObject
    >;
    log_named_int: TypedContractEvent<
      log_named_intEvent.InputTuple,
      log_named_intEvent.OutputTuple,
      log_named_intEvent.OutputObject
    >;

    "log_named_string(string,string)": TypedContractEvent<
      log_named_stringEvent.InputTuple,
      log_named_stringEvent.OutputTuple,
      log_named_stringEvent.OutputObject
    >;
    log_named_string: TypedContractEvent<
      log_named_stringEvent.InputTuple,
      log_named_stringEvent.OutputTuple,
      log_named_stringEvent.OutputObject
    >;

    "log_named_uint(string,uint256)": TypedContractEvent<
      log_named_uintEvent.InputTuple,
      log_named_uintEvent.OutputTuple,
      log_named_uintEvent.OutputObject
    >;
    log_named_uint: TypedContractEvent<
      log_named_uintEvent.InputTuple,
      log_named_uintEvent.OutputTuple,
      log_named_uintEvent.OutputObject
    >;

    "log_string(string)": TypedContractEvent<
      log_stringEvent.InputTuple,
      log_stringEvent.OutputTuple,
      log_stringEvent.OutputObject
    >;
    log_string: TypedContractEvent<
      log_stringEvent.InputTuple,
      log_stringEvent.OutputTuple,
      log_stringEvent.OutputObject
    >;

    "log_uint(uint256)": TypedContractEvent<
      log_uintEvent.InputTuple,
      log_uintEvent.OutputTuple,
      log_uintEvent.OutputObject
    >;
    log_uint: TypedContractEvent<
      log_uintEvent.InputTuple,
      log_uintEvent.OutputTuple,
      log_uintEvent.OutputObject
    >;

    "logs(bytes)": TypedContractEvent<
      logsEvent.InputTuple,
      logsEvent.OutputTuple,
      logsEvent.OutputObject
    >;
    logs: TypedContractEvent<
      logsEvent.InputTuple,
      logsEvent.OutputTuple,
      logsEvent.OutputObject
    >;
  };
}
