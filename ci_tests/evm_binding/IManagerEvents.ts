/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "./common";

export interface IManagerEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "EndpointAdded"
      | "EndpointRemoved"
      | "MessageAlreadyExecuted"
      | "MessageAttestedTo"
      | "SiblingUpdated"
      | "ThresholdChanged"
      | "TransferRedeemed"
      | "TransferSent"
  ): EventFragment;
}

export namespace EndpointAddedEvent {
  export type InputTuple = [
    endpoint: AddressLike,
    endpointsNum: BigNumberish,
    threshold: BigNumberish
  ];
  export type OutputTuple = [
    endpoint: string,
    endpointsNum: bigint,
    threshold: bigint
  ];
  export interface OutputObject {
    endpoint: string;
    endpointsNum: bigint;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EndpointRemovedEvent {
  export type InputTuple = [endpoint: AddressLike, threshold: BigNumberish];
  export type OutputTuple = [endpoint: string, threshold: bigint];
  export interface OutputObject {
    endpoint: string;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageAlreadyExecutedEvent {
  export type InputTuple = [sourceManager: BytesLike, msgHash: BytesLike];
  export type OutputTuple = [sourceManager: string, msgHash: string];
  export interface OutputObject {
    sourceManager: string;
    msgHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageAttestedToEvent {
  export type InputTuple = [
    digest: BytesLike,
    endpoint: AddressLike,
    index: BigNumberish
  ];
  export type OutputTuple = [digest: string, endpoint: string, index: bigint];
  export interface OutputObject {
    digest: string;
    endpoint: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SiblingUpdatedEvent {
  export type InputTuple = [
    chainId_: BigNumberish,
    oldSiblingContract: BytesLike,
    siblingContract: BytesLike
  ];
  export type OutputTuple = [
    chainId_: bigint,
    oldSiblingContract: string,
    siblingContract: string
  ];
  export interface OutputObject {
    chainId_: bigint;
    oldSiblingContract: string;
    siblingContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ThresholdChangedEvent {
  export type InputTuple = [
    oldThreshold: BigNumberish,
    threshold: BigNumberish
  ];
  export type OutputTuple = [oldThreshold: bigint, threshold: bigint];
  export interface OutputObject {
    oldThreshold: bigint;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferRedeemedEvent {
  export type InputTuple = [digest: BytesLike];
  export type OutputTuple = [digest: string];
  export interface OutputObject {
    digest: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSentEvent {
  export type InputTuple = [
    recipient: BytesLike,
    amount: BigNumberish,
    recipientChain: BigNumberish,
    msgSequence: BigNumberish
  ];
  export type OutputTuple = [
    recipient: string,
    amount: bigint,
    recipientChain: bigint,
    msgSequence: bigint
  ];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
    recipientChain: bigint;
    msgSequence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IManagerEvents extends BaseContract {
  connect(runner?: ContractRunner | null): IManagerEvents;
  waitForDeployment(): Promise<this>;

  interface: IManagerEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "EndpointAdded"
  ): TypedContractEvent<
    EndpointAddedEvent.InputTuple,
    EndpointAddedEvent.OutputTuple,
    EndpointAddedEvent.OutputObject
  >;
  getEvent(
    key: "EndpointRemoved"
  ): TypedContractEvent<
    EndpointRemovedEvent.InputTuple,
    EndpointRemovedEvent.OutputTuple,
    EndpointRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MessageAlreadyExecuted"
  ): TypedContractEvent<
    MessageAlreadyExecutedEvent.InputTuple,
    MessageAlreadyExecutedEvent.OutputTuple,
    MessageAlreadyExecutedEvent.OutputObject
  >;
  getEvent(
    key: "MessageAttestedTo"
  ): TypedContractEvent<
    MessageAttestedToEvent.InputTuple,
    MessageAttestedToEvent.OutputTuple,
    MessageAttestedToEvent.OutputObject
  >;
  getEvent(
    key: "SiblingUpdated"
  ): TypedContractEvent<
    SiblingUpdatedEvent.InputTuple,
    SiblingUpdatedEvent.OutputTuple,
    SiblingUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ThresholdChanged"
  ): TypedContractEvent<
    ThresholdChangedEvent.InputTuple,
    ThresholdChangedEvent.OutputTuple,
    ThresholdChangedEvent.OutputObject
  >;
  getEvent(
    key: "TransferRedeemed"
  ): TypedContractEvent<
    TransferRedeemedEvent.InputTuple,
    TransferRedeemedEvent.OutputTuple,
    TransferRedeemedEvent.OutputObject
  >;
  getEvent(
    key: "TransferSent"
  ): TypedContractEvent<
    TransferSentEvent.InputTuple,
    TransferSentEvent.OutputTuple,
    TransferSentEvent.OutputObject
  >;

  filters: {
    "EndpointAdded(address,uint256,uint8)": TypedContractEvent<
      EndpointAddedEvent.InputTuple,
      EndpointAddedEvent.OutputTuple,
      EndpointAddedEvent.OutputObject
    >;
    EndpointAdded: TypedContractEvent<
      EndpointAddedEvent.InputTuple,
      EndpointAddedEvent.OutputTuple,
      EndpointAddedEvent.OutputObject
    >;

    "EndpointRemoved(address,uint8)": TypedContractEvent<
      EndpointRemovedEvent.InputTuple,
      EndpointRemovedEvent.OutputTuple,
      EndpointRemovedEvent.OutputObject
    >;
    EndpointRemoved: TypedContractEvent<
      EndpointRemovedEvent.InputTuple,
      EndpointRemovedEvent.OutputTuple,
      EndpointRemovedEvent.OutputObject
    >;

    "MessageAlreadyExecuted(bytes32,bytes32)": TypedContractEvent<
      MessageAlreadyExecutedEvent.InputTuple,
      MessageAlreadyExecutedEvent.OutputTuple,
      MessageAlreadyExecutedEvent.OutputObject
    >;
    MessageAlreadyExecuted: TypedContractEvent<
      MessageAlreadyExecutedEvent.InputTuple,
      MessageAlreadyExecutedEvent.OutputTuple,
      MessageAlreadyExecutedEvent.OutputObject
    >;

    "MessageAttestedTo(bytes32,address,uint8)": TypedContractEvent<
      MessageAttestedToEvent.InputTuple,
      MessageAttestedToEvent.OutputTuple,
      MessageAttestedToEvent.OutputObject
    >;
    MessageAttestedTo: TypedContractEvent<
      MessageAttestedToEvent.InputTuple,
      MessageAttestedToEvent.OutputTuple,
      MessageAttestedToEvent.OutputObject
    >;

    "SiblingUpdated(uint16,bytes32,bytes32)": TypedContractEvent<
      SiblingUpdatedEvent.InputTuple,
      SiblingUpdatedEvent.OutputTuple,
      SiblingUpdatedEvent.OutputObject
    >;
    SiblingUpdated: TypedContractEvent<
      SiblingUpdatedEvent.InputTuple,
      SiblingUpdatedEvent.OutputTuple,
      SiblingUpdatedEvent.OutputObject
    >;

    "ThresholdChanged(uint8,uint8)": TypedContractEvent<
      ThresholdChangedEvent.InputTuple,
      ThresholdChangedEvent.OutputTuple,
      ThresholdChangedEvent.OutputObject
    >;
    ThresholdChanged: TypedContractEvent<
      ThresholdChangedEvent.InputTuple,
      ThresholdChangedEvent.OutputTuple,
      ThresholdChangedEvent.OutputObject
    >;

    "TransferRedeemed(bytes32)": TypedContractEvent<
      TransferRedeemedEvent.InputTuple,
      TransferRedeemedEvent.OutputTuple,
      TransferRedeemedEvent.OutputObject
    >;
    TransferRedeemed: TypedContractEvent<
      TransferRedeemedEvent.InputTuple,
      TransferRedeemedEvent.OutputTuple,
      TransferRedeemedEvent.OutputObject
    >;

    "TransferSent(bytes32,uint256,uint16,uint64)": TypedContractEvent<
      TransferSentEvent.InputTuple,
      TransferSentEvent.OutputTuple,
      TransferSentEvent.OutputObject
    >;
    TransferSent: TypedContractEvent<
      TransferSentEvent.InputTuple,
      TransferSentEvent.OutputTuple,
      TransferSentEvent.OutputObject
    >;
  };
}
