/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestImplementation,
  TestImplementationInterface,
} from "../../Implementation.t.sol/TestImplementation";

const _abi = [
  {
    type: "function",
    name: "getMigratesImmutables",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "incrementCounter",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "migrate",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "otherInitializer",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "upgrade",
    inputs: [
      {
        name: "newImplementation",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "upgradeCount",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "AdminChanged",
    inputs: [
      {
        name: "previousAdmin",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "newAdmin",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "BeaconUpgraded",
    inputs: [
      {
        name: "beacon",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Upgraded",
    inputs: [
      {
        name: "implementation",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "InvalidInitialization",
    inputs: [],
  },
  {
    type: "error",
    name: "NotInitializing",
    inputs: [],
  },
  {
    type: "error",
    name: "NotMigrating",
    inputs: [],
  },
  {
    type: "error",
    name: "OnlyDelegateCall",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50610019610022565b306080526100d4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156100725760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146100d15780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b6080516108486100ef60003960006105a601526108486000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638129fc1c1161005b5780638129fc1c146100bc5780638fd3ab80146100c4578063c2b3b94a146100cc578063c4128b6d146100d457600080fd5b80630900f010146100825780635b34b96614610097578063689f90c31461009f575b600080fd5b610095610090366004610720565b6100eb565b005b6100956100f7565b6100a7610115565b60405190151581526020015b60405180910390f35b610095610128565b61009561022e565b610095610344565b6100dd60005481565b6040519081526020016100b3565b6100f48161042c565b50565b6100ff61052f565b60008054908061010e83610766565b9190505550565b600061011f610568565b5460ff16919050565b61013061059c565b6000805160206107f38339815191528054600160401b810460ff16159067ffffffffffffffff166000811580156101645750825b905060008267ffffffffffffffff1660011480156101815750303b155b90508115801561018f575080155b156101ad5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156101d757845460ff60401b1916600160401b1785555b6101e060008055565b831561022757845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2906020015b60405180910390a15b5050505050565b61023661059c565b6000805160206107f38339815191525467ffffffffffffffff1661025b90600161077f565b6000805160206107f38339815191528054600160401b900460ff168061028f5750805467ffffffffffffffff808416911610155b156102ad5760405163f92ee8a960e01b815260040160405180910390fd5b805468ffffffffffffffffff191667ffffffffffffffff831617600160401b1781556102d76105e5565b5460ff166102f857604051632866815360e11b815260040160405180910390fd5b805460ff60401b1916815560405167ffffffffffffffff831681527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15050565b6000805160206107f38339815191528054600160401b810460ff16159067ffffffffffffffff166000811580156103785750825b905060008267ffffffffffffffff1660011480156103955750303b155b9050811580156103a3575080155b156103c15760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156101e057845460ff60401b1916600160401b178555831561022757845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200161021e565b61043461059c565b61043d81610613565b60006104476105e5565b805490915060ff161561045c5761045c6107a7565b805460ff191660011781556040805163011fa75760e71b815290513091638fd3ab8091600480830192600092919082900301818387803b15801561049f57600080fd5b505af11580156104b3573d6000803e3d6000fd5b50505050306001600160a01b031663689f90c36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051991906107bd565b506105246000610653565b805460ff1916905550565b6000805160206107f383398151915254600160401b900460ff1661056657604051631afcd79f60e31b815260040160405180910390fd5b565b60008061059660017f5443fea4dc453d96b81ce55b62e11a4094cc4cbb8a360956a7253cfdb42506cc6107df565b92915050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361056657604051633c64f99360e21b815260040160405180910390fd5b60008061059660017f7487ca88d037ca20519908b1ee7556206bef53bce0226a348750cb9d4f688e4f6107df565b61061c8161066e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b8061065c610568565b805460ff191691151591909117905550565b6001600160a01b0381163b6106df5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840160405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b60006020828403121561073257600080fd5b81356001600160a01b038116811461074957600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161077857610778610750565b5060010190565b67ffffffffffffffff8181168382160190808211156107a0576107a0610750565b5092915050565b634e487b7160e01b600052600160045260246000fd5b6000602082840312156107cf57600080fd5b8151801515811461074957600080fd5b818103818111156105965761059661075056fef0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a264697066735822122063a2944ee310c2cad2a1ff61afbbe41f2a2735bf00ec2eede66c4d06377294ef64736f6c63430008130033";

type TestImplementationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestImplementationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestImplementation__factory extends ContractFactory {
  constructor(...args: TestImplementationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<TestImplementation> {
    return super.deploy(overrides || {}) as Promise<TestImplementation>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestImplementation {
    return super.attach(address) as TestImplementation;
  }
  override connect(signer: Signer): TestImplementation__factory {
    return super.connect(signer) as TestImplementation__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestImplementationInterface {
    return new utils.Interface(_abi) as TestImplementationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestImplementation {
    return new Contract(address, _abi, signerOrProvider) as TestImplementation;
  }
}
