/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SafeConstructor,
  SafeConstructorInterface,
} from "../../Utils.sol/SafeConstructor";

const _abi = [
  {
    type: "constructor",
    inputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "InvalidInitialization",
    inputs: [],
  },
  {
    type: "error",
    name: "NotInitializing",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506016601a565b60ca565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff161560695760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b039081161460c75780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b603f806100d86000396000f3fe6080604052600080fdfea2646970667358221220c04d2ae40f1e46caa516c48538ce29fbafe2ebf8a20b402f0381b0e88dfd23f364736f6c63430008130033";

type SafeConstructorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SafeConstructorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SafeConstructor__factory extends ContractFactory {
  constructor(...args: SafeConstructorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<SafeConstructor> {
    return super.deploy(overrides || {}) as Promise<SafeConstructor>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SafeConstructor {
    return super.attach(address) as SafeConstructor;
  }
  override connect(signer: Signer): SafeConstructor__factory {
    return super.connect(signer) as SafeConstructor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SafeConstructorInterface {
    return new utils.Interface(_abi) as SafeConstructorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SafeConstructor {
    return new Contract(address, _abi, signerOrProvider) as SafeConstructor;
  }
}
