/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Governance, GovernanceInterface } from "../Governance";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_wormhole",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "MODULE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "encodeGeneralPurposeGovernanceMessage",
    inputs: [
      {
        name: "m",
        type: "tuple",
        internalType: "struct Governance.GeneralPurposeGovernanceMessage",
        components: [
          {
            name: "action",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "chain",
            type: "uint16",
            internalType: "uint16",
          },
          {
            name: "governanceContract",
            type: "address",
            internalType: "address",
          },
          {
            name: "governedContract",
            type: "address",
            internalType: "address",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "encoded",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "parseGeneralPurposeGovernanceMessage",
    inputs: [
      {
        name: "encoded",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "message",
        type: "tuple",
        internalType: "struct Governance.GeneralPurposeGovernanceMessage",
        components: [
          {
            name: "action",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "chain",
            type: "uint16",
            internalType: "uint16",
          },
          {
            name: "governanceContract",
            type: "address",
            internalType: "address",
          },
          {
            name: "governedContract",
            type: "address",
            internalType: "address",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "performGovernance",
    inputs: [
      {
        name: "vaa",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "error",
    name: "GovernanceActionAlreadyConsumed",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidAction",
    inputs: [
      {
        name: "action",
        type: "uint8",
        internalType: "uint8",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidGovernanceChainId",
    inputs: [
      {
        name: "chainId",
        type: "uint16",
        internalType: "uint16",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidGovernanceContract",
    inputs: [
      {
        name: "contractAddress",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidModule",
    inputs: [
      {
        name: "module",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "LengthMismatch",
    inputs: [
      {
        name: "encodedLength",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "expectedLength",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "NotRecipientChain",
    inputs: [
      {
        name: "chainId",
        type: "uint16",
        internalType: "uint16",
      },
    ],
  },
  {
    type: "error",
    name: "NotRecipientContract",
    inputs: [
      {
        name: "contractAddress",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "OutOfBounds",
    inputs: [
      {
        name: "offset",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "length",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "PayloadTooLong",
    inputs: [
      {
        name: "size",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
] as const;

const _bytecode =
  "";

type GovernanceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GovernanceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Governance__factory extends ContractFactory {
  constructor(...args: GovernanceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _wormhole: string,
    overrides?: Overrides & { from?: string }
  ): Promise<Governance> {
    return super.deploy(_wormhole, overrides || {}) as Promise<Governance>;
  }
  override getDeployTransaction(
    _wormhole: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_wormhole, overrides || {});
  }
  override attach(address: string): Governance {
    return super.attach(address) as Governance;
  }
  override connect(signer: Signer): Governance__factory {
    return super.connect(signer) as Governance__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GovernanceInterface {
    return new utils.Interface(_abi) as GovernanceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Governance {
    return new Contract(address, _abi, signerOrProvider) as Governance;
  }
}
