/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  NormalizationTest,
  NormalizationTestInterface,
} from "../../NormalizedAmount.t.sol/NormalizationTest";

const _abi = [
  {
    type: "function",
    name: "IS_TEST",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "excludeArtifacts",
    inputs: [],
    outputs: [
      {
        name: "excludedArtifacts_",
        type: "string[]",
        internalType: "string[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "excludeContracts",
    inputs: [],
    outputs: [
      {
        name: "excludedContracts_",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "excludeSenders",
    inputs: [],
    outputs: [
      {
        name: "excludedSenders_",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "failed",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "targetArtifactSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifactSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address",
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetArtifacts",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifacts_",
        type: "string[]",
        internalType: "string[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetContracts",
    inputs: [],
    outputs: [
      {
        name: "targetedContracts_",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetInterfaces",
    inputs: [],
    outputs: [
      {
        name: "targetedInterfaces_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzInterface[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address",
          },
          {
            name: "artifacts",
            type: "string[]",
            internalType: "string[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address",
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetSenders",
    inputs: [],
    outputs: [
      {
        name: "targetedSenders_",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "testAddOperatorDecimalsNotEqualNoRevert",
    inputs: [],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "testAddOperatorDecimalsNotEqualRevert",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "testAddOperatorNonZero",
    inputs: [],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "testAddOperatorZero",
    inputs: [],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "testDifferentDecimals",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "testNormalizationRoundTrip",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "testSubOperatorNonZero",
    inputs: [],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "testSubOperatorOverflow",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "testSubOperatorZero",
    inputs: [],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "event",
    name: "log",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_address",
    inputs: [
      {
        name: "",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_bytes",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_bytes32",
    inputs: [
      {
        name: "",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_int",
    inputs: [
      {
        name: "",
        type: "int256",
        indexed: false,
        internalType: "int256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_address",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_bytes",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_bytes32",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_decimal_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256",
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_decimal_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_string",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_string",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_uint",
    inputs: [
      {
        name: "",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "logs",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AmountTooLarge",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "NumberOfDecimalsNotEqual",
    inputs: [
      {
        name: "decimals",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "decimalsOther",
        type: "uint8",
        internalType: "uint8",
      },
    ],
  },
] as const;

const _bytecode =
  "0x608060405260078054600160ff199182168117909255600b8054909116909117905534801561002d57600080fd5b50611dfb8061003d6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80637cbbaee5116100ad578063ba414fa611610071578063ba414fa6146101e8578063d051688314610200578063dd0cd1e014610208578063e20c9f7114610210578063fa7626d41461021857600080fd5b80637cbbaee5146101b357806385226c81146101bb578063916a17c6146101d057806394726d8f146101d8578063b5508aa9146101e057600080fd5b80633e5e3c23116100f45780633e5e3c231461017e5780633f7286f414610186578063477e93e21461018e5780634e2aa78f1461019657806366d9a9a01461019e57600080fd5b8063060da6e6146101315780631ed7831c1461013b5780632ade38801461015957806332962b7a1461016e5780633841c23d14610176575b600080fd5b610139610225565b005b610143610288565b60405161015091906118ae565b60405180910390f35b6101616102ea565b604051610150919061191f565b61013961042c565b610139610492565b610143610578565b6101436105d8565b610139610638565b6101396107cb565b6101a661091a565b60405161015091906119fa565b610139610a00565b6101c3610b82565b6040516101509190611aad565b6101a6610c52565b610139610d38565b6101c3610ea1565b6101f0610f71565b6040519015158152602001610150565b61013961109e565b6101396111ed565b610143611336565b6007546101f09060ff1681565b6012600061023482600a611c14565b61023f906032611c23565b9050600061024d8284611396565b9050600061025b8285611424565b9050600061026a85600a611c14565b610275906032611c23565b9050610281818361145d565b5050505050565b606060148054806020026020016040519081016040528092919081815260200182805480156102e057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102c2575b5050505050905090565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561042357600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561040c57838290600052602060002001805461037f90611c3a565b80601f01602080910402602001604051908101604052809291908181526020018280546103ab90611c3a565b80156103f85780601f106103cd576101008083540402835291602001916103f8565b820191906000526020600020905b8154815290600101906020018083116103db57829003601f168201915b505050505081526020019060010190610360565b50505050815250508152602001906001019061030e565b50505050905090565b60126006600061043d83600a611c14565b610448906005611c23565b905060006104568285611396565b905060006104648285611424565b9050600061047385600a611c14565b61047e906005611c23565b905061048a818361145d565b505050505050565b6012600360006104a383600a611c14565b6104ae906005611c23565b905060006104bd83600a611c14565b6104c8906002611c23565b905060006104d68386611396565b905060006104e48386611396565b90507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561054457600080fd5b505af1158015610558573d6000803e3d6000fd5b5050505061056f818361158490919063ffffffff16565b50505050505050565b606060168054806020026020016040519081016040528092919081815260200182805480156102e0576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c2575050505050905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102e0576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c2575050505050905090565b60408051808201825260128152600360208083018290528351808501909452600884528301529060005b60028160ff1610156107c6576000838260ff166002811061068557610685611c74565b602002015161069590600a611c14565b6106a0906005611c23565b90506000848360ff16600281106106b9576106b9611c74565b60200201516106c990600a611c14565b6106d4906002611c23565b905060006106fc868560ff16600281106106f0576106f0611c74565b60200201518490611396565b90506000610718878660ff16600281106106f0576106f0611c74565b90506000610726838361163f565b905060006040518060400160405280898960ff166002811061074a5761074a611c74565b602002015161075d9060ff16600a611c8a565b610768906003611c23565b6001600160401b03168152602001898960ff166002811061078b5761078b611c74565b602002015160ff16905290506107a181836116c6565b6107ad576107ad611c9f565b50505050505080806107be90611cb5565b915050610662565b505050565b60408051808201825260128152600360208083018290528351808501909452600884528301529060005b60028160ff1610156107c6576000838260ff166002811061081857610818611c74565b602002015161082890600a611c14565b610833906005611c23565b9050600080610850868560ff16600281106106f0576106f0611c74565b9050600061086c878660ff16600281106106f0576106f0611c74565b9050600061087a8383611584565b905060006040518060400160405280898960ff166002811061089e5761089e611c74565b60200201516108b19060ff16600a611c8a565b6108bc906005611c23565b6001600160401b03168152602001898960ff16600281106108df576108df611c74565b602002015160ff16905290506108f581836116c6565b61090157610901611c9f565b505050505050808061091290611cb5565b9150506107f5565b60606019805480602002602001604051908101604052809291908181526020016000905b828210156104235760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156109e857602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116109aa5790505b5050505050815250508152602001906001019061093e565b60408051808201825260128152600360208083018290528351808501909452600884528301529060005b60028160ff1610156107c6576000838260ff1660028110610a4d57610a4d611c74565b6020020151610a5d90600a611c14565b610a68906005611c23565b90506000848360ff1660028110610a8157610a81611c74565b6020020151610a9190600a611c14565b610a9c906002611c23565b90506000610ab8868560ff16600281106106f0576106f0611c74565b90506000610ad4878660ff16600281106106f0576106f0611c74565b90506000610ae28383611584565b905060006040518060400160405280898960ff1660028110610b0657610b06611c74565b6020020151610b199060ff16600a611c8a565b610b24906007611c23565b6001600160401b03168152602001898960ff1660028110610b4757610b47611c74565b602002015160ff1690529050610b5d81836116c6565b610b6957610b69611c9f565b5050505050508080610b7a90611cb5565b915050610a2a565b60606018805480602002602001604051908101604052809291908181526020016000905b82821015610423578382906000526020600020018054610bc590611c3a565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf190611c3a565b8015610c3e5780601f10610c1357610100808354040283529160200191610c3e565b820191906000526020600020905b815481529060010190602001808311610c2157829003601f168201915b505050505081526020019060010190610ba6565b6060601a805480602002602001604051908101604052809291908181526020016000905b828210156104235760008481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015610d2057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610ce25790505b50505050508152505081526020019060010190610c76565b60408051808201909152601281526003602082015260005b60028160ff161015610e9d576000828260ff1660028110610d7357610d73611c74565b6020020151610d8390600a611c14565b610d8e906005611c23565b90506000838360ff1660028110610da757610da7611c74565b6020020151610db790600a611c14565b610dc2906006611c23565b90506000610dde858560ff16600281106106f0576106f0611c74565b90506000610dfa868660ff16600281106106f0576106f0611c74565b90507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663f48448146040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e5a57600080fd5b505af1158015610e6e573d6000803e3d6000fd5b50505050610e85818361163f90919063ffffffff16565b50505050508080610e9590611cb5565b915050610d50565b5050565b60606017805480602002602001604051908101604052809291908181526020016000905b82821015610423578382906000526020600020018054610ee490611c3a565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1090611c3a565b8015610f5d5780601f10610f3257610100808354040283529160200191610f5d565b820191906000526020600020905b815481529060010190602001808311610f4057829003601f168201915b505050505081526020019060010190610ec5565b600754600090610100900460ff1615610f935750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156110995760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091611021917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611cd4565b60408051601f198184030181529082905261103b91611d05565b6000604051808303816000865af19150503d8060008114611078576040519150601f19603f3d011682016040523d82523d6000602084013e61107d565b606091505b50915050808060200190518101906110959190611d21565b9150505b919050565b60408051808201825260128152600360208083018290528351808501909452600884528301529060005b60028160ff1610156107c6576000838260ff16600281106110eb576110eb611c74565b60200201516110fb90600a611c14565b611106906005611c23565b9050600080611123868560ff16600281106106f0576106f0611c74565b9050600061113f878660ff16600281106106f0576106f0611c74565b9050600061114d838361163f565b905060006040518060400160405280898960ff166002811061117157611171611c74565b60200201516111849060ff16600a611c8a565b61118f906005611c23565b6001600160401b03168152602001898960ff16600281106111b2576111b2611c74565b602002015160ff16905290506111c881836116c6565b6111d4576111d4611c9f565b50505050505080806111e590611cb5565b9150506110c8565b60408051808201825260128152600a60208083019190915282518084019093526008808452908301529060005b60028160ff1610156107c6576000838260ff166002811061123d5761123d611c74565b602002015161124d90600a611c14565b611258906005611c23565b9050637735940060006112798660ff8616600281106106f0576106f0611c74565b90506000611288836009611396565b905060006112968383611584565b905060006040518060400160405280898960ff16600281106112ba576112ba611c74565b60200201516112cd9060ff16600a611c8a565b6112d8906007611c23565b6001600160401b03168152602001898960ff16600281106112fb576112fb611c74565b602002015160ff169052905061131181836116c6565b61131d5761131d611c9f565b505050505050808061132e90611cb5565b91505061121a565b606060138054806020026020016040519081016040528092919081815260200182805480156102e0576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116102c2575050505050905090565b604080518082019091526000808252602082015260006113b76008846116fb565b905060006113c6858584611717565b90506001600160401b038111156113f8576040516304041d9560e11b8152600481018690526024015b60405180910390fd5b6040518060400160405280826001600160401b031681526020018360ff16815250925050505b92915050565b60008060006114398580516020909101519091565b91506001600160401b031691506000611453838387611717565b9695505050505050565b808214610e9d577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516114ce9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808080808081319599d60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a81830152690808080808149a59da1d60b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610e9d611780565b60408051808201909152600080825260208201526115a18361188c565b156115ad57508061141e565b6115b68261188c565b156115c257508161141e565b816020015160ff16836020015160ff16146116075760208084015190830151604051635ce6db6160e11b815260ff9283166004820152911660248201526044016113ef565b6040805180820190915282518451829161162091611d43565b6001600160401b0316815260208581015160ff16910152905092915050565b604080518082019091526000808252602082015261165c8261188c565b1561166857508161141e565b816020015160ff16836020015160ff16146116ad5760208084015190830151604051635ce6db6160e11b815260ff9283166004820152911660248201526044016113ef565b6040805180820190915282518451829161162091611d6a565b805182516000916001600160401b0391821691161480156116f45750816020015160ff16836020015160ff16145b9392505050565b60008160ff168360ff161061171057816116f4565b5090919050565b60008160ff168360ff160361172d5750826116f4565b8160ff168360ff161115611761576117458284611d8a565b61175090600a611c14565b61175a9085611da3565b90506116f4565b61176b8383611d8a565b61177690600a611c14565b61175a9085611c23565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561187b5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261181a9291602001611cd4565b60408051601f198184030181529082905261183491611d05565b6000604051808303816000865af19150503d8060008114611871576040519150601f19603f3d011682016040523d82523d6000602084013e611876565b606091505b505050505b6007805461ff001916610100179055565b80516000906001600160401b031615801561141e5750506020015160ff161590565b6020808252825182820181905260009190848201906040850190845b818110156118ef5783516001600160a01b0316835292840192918401916001016118ca565b50909695505050505050565b60005b838110156119165781810151838201526020016118fe565b50506000910152565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156119ed57603f19888603018452815180516001600160a01b0316865286015160408787018190528151908701819052908701906060600582901b88018101919088019060005b818110156119d657898403605f19018352845180518086526119b7818e88018f85016118fb565b958c0195601f01601f1916949094018b019350918a0191600101611990565b509197505050938601935090850190600101611946565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015611a9e57898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015611a895783516001600160e01b0319168252928b019260019290920191908b0190611a5f565b50978a01979550505091870191600101611a22565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156119ed57878503603f1901845281518051808752611afb818989018a85016118fb565b601f01601f191695909501860194509285019290850190600101611ad4565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115611b6b578160001904821115611b5157611b51611b1a565b80851615611b5e57918102915b93841c9390800290611b35565b509250929050565b600082611b825750600161141e565b81611b8f5750600061141e565b8160018114611ba55760028114611baf57611bcb565b600191505061141e565b60ff841115611bc057611bc0611b1a565b50506001821b61141e565b5060208310610133831016604e8410600b8410161715611bee575081810a61141e565b611bf88383611b30565b8060001904821115611c0c57611c0c611b1a565b029392505050565b60006116f460ff841683611b73565b808202811582820484141761141e5761141e611b1a565b600181811c90821680611c4e57607f821691505b602082108103611c6e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006116f46001600160401b03841683611b73565b634e487b7160e01b600052600160045260246000fd5b600060ff821660ff8103611ccb57611ccb611b1a565b60010192915050565b6001600160e01b0319831681528151600090611cf78160048501602087016118fb565b919091016004019392505050565b60008251611d178184602087016118fb565b9190910192915050565b600060208284031215611d3357600080fd5b815180151581146116f457600080fd5b6001600160401b03818116838216019080821115611d6357611d63611b1a565b5092915050565b6001600160401b03828116828216039080821115611d6357611d63611b1a565b60ff828116828216039081111561141e5761141e611b1a565b600082611dc057634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212203db66c4204f64b000f6e1343d6b046772a3543fc2fc691e28be4a1a45616a67564736f6c63430008130033";

type NormalizationTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NormalizationTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NormalizationTest__factory extends ContractFactory {
  constructor(...args: NormalizationTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<NormalizationTest> {
    return super.deploy(overrides || {}) as Promise<NormalizationTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NormalizationTest {
    return super.attach(address) as NormalizationTest;
  }
  override connect(signer: Signer): NormalizationTest__factory {
    return super.connect(signer) as NormalizationTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NormalizationTestInterface {
    return new utils.Interface(_abi) as NormalizationTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NormalizationTest {
    return new Contract(address, _abi, signerOrProvider) as NormalizationTest;
  }
}
