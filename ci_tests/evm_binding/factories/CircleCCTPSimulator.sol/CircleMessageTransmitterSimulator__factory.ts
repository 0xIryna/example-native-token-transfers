/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CircleMessageTransmitterSimulator,
  CircleMessageTransmitterSimulatorInterface,
} from "../../CircleCCTPSimulator.sol/CircleMessageTransmitterSimulator";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "messageTransmitter_",
        type: "address",
        internalType: "address",
      },
      {
        name: "attesterPrivateKey_",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "fetchMessageTransmitterLogsFromLogs",
    inputs: [
      {
        name: "logs",
        type: "tuple[]",
        internalType: "struct VmSafe.Log[]",
        components: [
          {
            name: "topics",
            type: "bytes32[]",
            internalType: "bytes32[]",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "emitter",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct VmSafe.Log[]",
        components: [
          {
            name: "topics",
            type: "bytes32[]",
            internalType: "bytes32[]",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "emitter",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "fetchSignedMessageFromLog",
    inputs: [
      {
        name: "log",
        type: "tuple",
        internalType: "struct VmSafe.Log",
        components: [
          {
            name: "topics",
            type: "bytes32[]",
            internalType: "bytes32[]",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "emitter",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct CCTPMessageLib.CCTPMessage",
        components: [
          {
            name: "message",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "signature",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "messageTransmitter",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IMessageTransmitter",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "signMessage",
    inputs: [
      {
        name: "message",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "signedMessage",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "valid",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "vm",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract Vm",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "";

type CircleMessageTransmitterSimulatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CircleMessageTransmitterSimulatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CircleMessageTransmitterSimulator__factory extends ContractFactory {
  constructor(...args: CircleMessageTransmitterSimulatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    messageTransmitter_: string,
    attesterPrivateKey_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<CircleMessageTransmitterSimulator> {
    return super.deploy(
      messageTransmitter_,
      attesterPrivateKey_,
      overrides || {}
    ) as Promise<CircleMessageTransmitterSimulator>;
  }
  override getDeployTransaction(
    messageTransmitter_: string,
    attesterPrivateKey_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      messageTransmitter_,
      attesterPrivateKey_,
      overrides || {}
    );
  }
  override attach(address: string): CircleMessageTransmitterSimulator {
    return super.attach(address) as CircleMessageTransmitterSimulator;
  }
  override connect(signer: Signer): CircleMessageTransmitterSimulator__factory {
    return super.connect(signer) as CircleMessageTransmitterSimulator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CircleMessageTransmitterSimulatorInterface {
    return new utils.Interface(
      _abi
    ) as CircleMessageTransmitterSimulatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CircleMessageTransmitterSimulator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CircleMessageTransmitterSimulator;
  }
}
