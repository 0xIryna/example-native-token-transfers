/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace EndpointStructs {
  export type ManagerMessageStruct = {
    sequence: BigNumberish;
    sender: BytesLike;
    payload: BytesLike;
  };

  export type ManagerMessageStructOutput = [
    sequence: bigint,
    sender: string,
    payload: string
  ] & { sequence: bigint; sender: string; payload: string };

  export type EndpointInstructionStruct = {
    index: BigNumberish;
    payload: BytesLike;
  };

  export type EndpointInstructionStructOutput = [
    index: bigint,
    payload: string
  ] & { index: bigint; payload: string };
}

export interface IManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "attestationReceived"
      | "completeInboundQueuedTransfer"
      | "completeOutboundQueuedTransfer"
      | "isMessageApproved"
      | "isMessageExecuted"
      | "nextMessageSequence"
      | "quoteDeliveryPrice"
      | "setInboundLimit"
      | "setOutboundLimit"
      | "setSibling"
      | "token"
      | "transfer"
      | "upgrade"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "attestationReceived",
    values: [BigNumberish, BytesLike, EndpointStructs.ManagerMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "completeInboundQueuedTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "completeOutboundQueuedTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isMessageApproved",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMessageExecuted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextMessageSequence",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteDeliveryPrice",
    values: [
      BigNumberish,
      EndpointStructs.EndpointInstructionStruct[],
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setInboundLimit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOutboundLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSibling",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [BigNumberish, BigNumberish, BytesLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "attestationReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeInboundQueuedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeOutboundQueuedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMessageApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMessageExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextMessageSequence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteDeliveryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInboundLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOutboundLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSibling", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
}

export interface IManager extends BaseContract {
  connect(runner?: ContractRunner | null): IManager;
  waitForDeployment(): Promise<this>;

  interface: IManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  attestationReceived: TypedContractMethod<
    [
      sourceChainId: BigNumberish,
      sourceManagerAddress: BytesLike,
      payload: EndpointStructs.ManagerMessageStruct
    ],
    [void],
    "nonpayable"
  >;

  completeInboundQueuedTransfer: TypedContractMethod<
    [digest: BytesLike],
    [void],
    "nonpayable"
  >;

  completeOutboundQueuedTransfer: TypedContractMethod<
    [queueSequence: BigNumberish],
    [bigint],
    "payable"
  >;

  isMessageApproved: TypedContractMethod<
    [digest: BytesLike],
    [boolean],
    "view"
  >;

  isMessageExecuted: TypedContractMethod<
    [digest: BytesLike],
    [boolean],
    "view"
  >;

  nextMessageSequence: TypedContractMethod<[], [bigint], "view">;

  quoteDeliveryPrice: TypedContractMethod<
    [
      recipientChain: BigNumberish,
      endpointInstructions: EndpointStructs.EndpointInstructionStruct[],
      enabledEndpoints: AddressLike[]
    ],
    [[bigint[], bigint]],
    "view"
  >;

  setInboundLimit: TypedContractMethod<
    [limit: BigNumberish, chainId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOutboundLimit: TypedContractMethod<
    [limit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSibling: TypedContractMethod<
    [siblingChainId: BigNumberish, siblingContract: BytesLike],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  transfer: TypedContractMethod<
    [
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      shouldQueue: boolean,
      encodedInstructions: BytesLike
    ],
    [bigint],
    "payable"
  >;

  upgrade: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "attestationReceived"
  ): TypedContractMethod<
    [
      sourceChainId: BigNumberish,
      sourceManagerAddress: BytesLike,
      payload: EndpointStructs.ManagerMessageStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "completeInboundQueuedTransfer"
  ): TypedContractMethod<[digest: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeOutboundQueuedTransfer"
  ): TypedContractMethod<[queueSequence: BigNumberish], [bigint], "payable">;
  getFunction(
    nameOrSignature: "isMessageApproved"
  ): TypedContractMethod<[digest: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMessageExecuted"
  ): TypedContractMethod<[digest: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "nextMessageSequence"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "quoteDeliveryPrice"
  ): TypedContractMethod<
    [
      recipientChain: BigNumberish,
      endpointInstructions: EndpointStructs.EndpointInstructionStruct[],
      enabledEndpoints: AddressLike[]
    ],
    [[bigint[], bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "setInboundLimit"
  ): TypedContractMethod<
    [limit: BigNumberish, chainId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOutboundLimit"
  ): TypedContractMethod<[limit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSibling"
  ): TypedContractMethod<
    [siblingChainId: BigNumberish, siblingContract: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      shouldQueue: boolean,
      encodedInstructions: BytesLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "upgrade"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
