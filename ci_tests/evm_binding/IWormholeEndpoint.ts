/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace EndpointStructs {
  export type EndpointMessageStruct = {
    sourceManagerAddress: BytesLike;
    recipientManagerAddress: BytesLike;
    managerPayload: BytesLike;
    endpointPayload: BytesLike;
  };

  export type EndpointMessageStructOutput = [
    sourceManagerAddress: string,
    recipientManagerAddress: string,
    managerPayload: string,
    endpointPayload: string
  ] & {
    sourceManagerAddress: string;
    recipientManagerAddress: string;
    managerPayload: string;
    endpointPayload: string;
  };
}

export interface IWormholeEndpointInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getWormholeSibling"
      | "isSpecialRelayingEnabled"
      | "isVAAConsumed"
      | "isWormholeEvmChain"
      | "isWormholeRelayingEnabled"
      | "receiveMessage"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ReceivedMessage"
      | "ReceivedRelayedMessage"
      | "SendEndpointMessage"
      | "SetIsSpecialRelayingEnabled"
      | "SetIsWormholeEvmChain"
      | "SetIsWormholeRelayingEnabled"
      | "SetWormholeSibling"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getWormholeSibling",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSpecialRelayingEnabled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isVAAConsumed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWormholeEvmChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWormholeRelayingEnabled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveMessage",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getWormholeSibling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSpecialRelayingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVAAConsumed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWormholeEvmChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWormholeRelayingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveMessage",
    data: BytesLike
  ): Result;
}

export namespace ReceivedMessageEvent {
  export type InputTuple = [
    digest: BytesLike,
    emitterChainId: BigNumberish,
    emitterAddress: BytesLike,
    sequence: BigNumberish
  ];
  export type OutputTuple = [
    digest: string,
    emitterChainId: bigint,
    emitterAddress: string,
    sequence: bigint
  ];
  export interface OutputObject {
    digest: string;
    emitterChainId: bigint;
    emitterAddress: string;
    sequence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedRelayedMessageEvent {
  export type InputTuple = [
    digest: BytesLike,
    emitterChainId: BigNumberish,
    emitterAddress: BytesLike
  ];
  export type OutputTuple = [
    digest: string,
    emitterChainId: bigint,
    emitterAddress: string
  ];
  export interface OutputObject {
    digest: string;
    emitterChainId: bigint;
    emitterAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendEndpointMessageEvent {
  export type InputTuple = [
    recipientChain: BigNumberish,
    message: EndpointStructs.EndpointMessageStruct
  ];
  export type OutputTuple = [
    recipientChain: bigint,
    message: EndpointStructs.EndpointMessageStructOutput
  ];
  export interface OutputObject {
    recipientChain: bigint;
    message: EndpointStructs.EndpointMessageStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetIsSpecialRelayingEnabledEvent {
  export type InputTuple = [chainId: BigNumberish, isRelayingEnabled: boolean];
  export type OutputTuple = [chainId: bigint, isRelayingEnabled: boolean];
  export interface OutputObject {
    chainId: bigint;
    isRelayingEnabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetIsWormholeEvmChainEvent {
  export type InputTuple = [chainId: BigNumberish];
  export type OutputTuple = [chainId: bigint];
  export interface OutputObject {
    chainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetIsWormholeRelayingEnabledEvent {
  export type InputTuple = [chainId: BigNumberish, isRelayingEnabled: boolean];
  export type OutputTuple = [chainId: bigint, isRelayingEnabled: boolean];
  export interface OutputObject {
    chainId: bigint;
    isRelayingEnabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetWormholeSiblingEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    oldSiblingContract: BytesLike,
    siblingContract: BytesLike
  ];
  export type OutputTuple = [
    chainId: bigint,
    oldSiblingContract: string,
    siblingContract: string
  ];
  export interface OutputObject {
    chainId: bigint;
    oldSiblingContract: string;
    siblingContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IWormholeEndpoint extends BaseContract {
  connect(runner?: ContractRunner | null): IWormholeEndpoint;
  waitForDeployment(): Promise<this>;

  interface: IWormholeEndpointInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getWormholeSibling: TypedContractMethod<
    [chainId: BigNumberish],
    [string],
    "view"
  >;

  isSpecialRelayingEnabled: TypedContractMethod<
    [chainId: BigNumberish],
    [boolean],
    "view"
  >;

  isVAAConsumed: TypedContractMethod<[hash: BytesLike], [boolean], "view">;

  isWormholeEvmChain: TypedContractMethod<
    [chainId: BigNumberish],
    [boolean],
    "view"
  >;

  isWormholeRelayingEnabled: TypedContractMethod<
    [chainId: BigNumberish],
    [boolean],
    "view"
  >;

  receiveMessage: TypedContractMethod<
    [encodedMessage: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getWormholeSibling"
  ): TypedContractMethod<[chainId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isSpecialRelayingEnabled"
  ): TypedContractMethod<[chainId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVAAConsumed"
  ): TypedContractMethod<[hash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWormholeEvmChain"
  ): TypedContractMethod<[chainId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWormholeRelayingEnabled"
  ): TypedContractMethod<[chainId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "receiveMessage"
  ): TypedContractMethod<[encodedMessage: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "ReceivedMessage"
  ): TypedContractEvent<
    ReceivedMessageEvent.InputTuple,
    ReceivedMessageEvent.OutputTuple,
    ReceivedMessageEvent.OutputObject
  >;
  getEvent(
    key: "ReceivedRelayedMessage"
  ): TypedContractEvent<
    ReceivedRelayedMessageEvent.InputTuple,
    ReceivedRelayedMessageEvent.OutputTuple,
    ReceivedRelayedMessageEvent.OutputObject
  >;
  getEvent(
    key: "SendEndpointMessage"
  ): TypedContractEvent<
    SendEndpointMessageEvent.InputTuple,
    SendEndpointMessageEvent.OutputTuple,
    SendEndpointMessageEvent.OutputObject
  >;
  getEvent(
    key: "SetIsSpecialRelayingEnabled"
  ): TypedContractEvent<
    SetIsSpecialRelayingEnabledEvent.InputTuple,
    SetIsSpecialRelayingEnabledEvent.OutputTuple,
    SetIsSpecialRelayingEnabledEvent.OutputObject
  >;
  getEvent(
    key: "SetIsWormholeEvmChain"
  ): TypedContractEvent<
    SetIsWormholeEvmChainEvent.InputTuple,
    SetIsWormholeEvmChainEvent.OutputTuple,
    SetIsWormholeEvmChainEvent.OutputObject
  >;
  getEvent(
    key: "SetIsWormholeRelayingEnabled"
  ): TypedContractEvent<
    SetIsWormholeRelayingEnabledEvent.InputTuple,
    SetIsWormholeRelayingEnabledEvent.OutputTuple,
    SetIsWormholeRelayingEnabledEvent.OutputObject
  >;
  getEvent(
    key: "SetWormholeSibling"
  ): TypedContractEvent<
    SetWormholeSiblingEvent.InputTuple,
    SetWormholeSiblingEvent.OutputTuple,
    SetWormholeSiblingEvent.OutputObject
  >;

  filters: {
    "ReceivedMessage(bytes32,uint16,bytes32,uint64)": TypedContractEvent<
      ReceivedMessageEvent.InputTuple,
      ReceivedMessageEvent.OutputTuple,
      ReceivedMessageEvent.OutputObject
    >;
    ReceivedMessage: TypedContractEvent<
      ReceivedMessageEvent.InputTuple,
      ReceivedMessageEvent.OutputTuple,
      ReceivedMessageEvent.OutputObject
    >;

    "ReceivedRelayedMessage(bytes32,uint16,bytes32)": TypedContractEvent<
      ReceivedRelayedMessageEvent.InputTuple,
      ReceivedRelayedMessageEvent.OutputTuple,
      ReceivedRelayedMessageEvent.OutputObject
    >;
    ReceivedRelayedMessage: TypedContractEvent<
      ReceivedRelayedMessageEvent.InputTuple,
      ReceivedRelayedMessageEvent.OutputTuple,
      ReceivedRelayedMessageEvent.OutputObject
    >;

    "SendEndpointMessage(uint16,tuple)": TypedContractEvent<
      SendEndpointMessageEvent.InputTuple,
      SendEndpointMessageEvent.OutputTuple,
      SendEndpointMessageEvent.OutputObject
    >;
    SendEndpointMessage: TypedContractEvent<
      SendEndpointMessageEvent.InputTuple,
      SendEndpointMessageEvent.OutputTuple,
      SendEndpointMessageEvent.OutputObject
    >;

    "SetIsSpecialRelayingEnabled(uint16,bool)": TypedContractEvent<
      SetIsSpecialRelayingEnabledEvent.InputTuple,
      SetIsSpecialRelayingEnabledEvent.OutputTuple,
      SetIsSpecialRelayingEnabledEvent.OutputObject
    >;
    SetIsSpecialRelayingEnabled: TypedContractEvent<
      SetIsSpecialRelayingEnabledEvent.InputTuple,
      SetIsSpecialRelayingEnabledEvent.OutputTuple,
      SetIsSpecialRelayingEnabledEvent.OutputObject
    >;

    "SetIsWormholeEvmChain(uint16)": TypedContractEvent<
      SetIsWormholeEvmChainEvent.InputTuple,
      SetIsWormholeEvmChainEvent.OutputTuple,
      SetIsWormholeEvmChainEvent.OutputObject
    >;
    SetIsWormholeEvmChain: TypedContractEvent<
      SetIsWormholeEvmChainEvent.InputTuple,
      SetIsWormholeEvmChainEvent.OutputTuple,
      SetIsWormholeEvmChainEvent.OutputObject
    >;

    "SetIsWormholeRelayingEnabled(uint16,bool)": TypedContractEvent<
      SetIsWormholeRelayingEnabledEvent.InputTuple,
      SetIsWormholeRelayingEnabledEvent.OutputTuple,
      SetIsWormholeRelayingEnabledEvent.OutputObject
    >;
    SetIsWormholeRelayingEnabled: TypedContractEvent<
      SetIsWormholeRelayingEnabledEvent.InputTuple,
      SetIsWormholeRelayingEnabledEvent.OutputTuple,
      SetIsWormholeRelayingEnabledEvent.OutputObject
    >;

    "SetWormholeSibling(uint16,bytes32,bytes32)": TypedContractEvent<
      SetWormholeSiblingEvent.InputTuple,
      SetWormholeSiblingEvent.OutputTuple,
      SetWormholeSiblingEvent.OutputObject
    >;
    SetWormholeSibling: TypedContractEvent<
      SetWormholeSiblingEvent.InputTuple,
      SetWormholeSiblingEvent.OutputTuple,
      SetWormholeSiblingEvent.OutputObject
    >;
  };
}
