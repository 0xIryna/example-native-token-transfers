/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type NormalizedAmountStruct = {
  amount: BigNumberish;
  decimals: BigNumberish;
};

export type NormalizedAmountStructOutput = [
  amount: bigint,
  decimals: bigint
] & { amount: bigint; decimals: bigint };

export declare namespace IRateLimiter {
  export type InboundQueuedTransferStruct = {
    amount: NormalizedAmountStruct;
    txTimestamp: BigNumberish;
    recipient: AddressLike;
  };

  export type InboundQueuedTransferStructOutput = [
    amount: NormalizedAmountStructOutput,
    txTimestamp: bigint,
    recipient: string
  ] & {
    amount: NormalizedAmountStructOutput;
    txTimestamp: bigint;
    recipient: string;
  };

  export type OutboundQueuedTransferStruct = {
    recipient: BytesLike;
    amount: NormalizedAmountStruct;
    txTimestamp: BigNumberish;
    recipientChain: BigNumberish;
    sender: AddressLike;
    endpointInstructions: BytesLike;
  };

  export type OutboundQueuedTransferStructOutput = [
    recipient: string,
    amount: NormalizedAmountStructOutput,
    txTimestamp: bigint,
    recipientChain: bigint,
    sender: string,
    endpointInstructions: string
  ] & {
    recipient: string;
    amount: NormalizedAmountStructOutput;
    txTimestamp: bigint;
    recipientChain: bigint;
    sender: string;
    endpointInstructions: string;
  };
}

export interface RateLimiterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getCurrentInboundCapacity"
      | "getCurrentOutboundCapacity"
      | "getInboundQueuedTransfer"
      | "getOutboundQueuedTransfer"
      | "rateLimitDuration"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "InboundTransferQueued"
      | "OutboundTransferQueued"
      | "OutboundTransferRateLimited"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getCurrentInboundCapacity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentOutboundCapacity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInboundQueuedTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutboundQueuedTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rateLimitDuration",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentInboundCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentOutboundCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInboundQueuedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutboundQueuedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateLimitDuration",
    data: BytesLike
  ): Result;
}

export namespace InboundTransferQueuedEvent {
  export type InputTuple = [digest: BytesLike];
  export type OutputTuple = [digest: string];
  export interface OutputObject {
    digest: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OutboundTransferQueuedEvent {
  export type InputTuple = [queueSequence: BigNumberish];
  export type OutputTuple = [queueSequence: bigint];
  export interface OutputObject {
    queueSequence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OutboundTransferRateLimitedEvent {
  export type InputTuple = [
    sender: AddressLike,
    sequence: BigNumberish,
    amount: BigNumberish,
    currentCapacity: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    sequence: bigint,
    amount: bigint,
    currentCapacity: bigint
  ];
  export interface OutputObject {
    sender: string;
    sequence: bigint;
    amount: bigint;
    currentCapacity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RateLimiter extends BaseContract {
  connect(runner?: ContractRunner | null): RateLimiter;
  waitForDeployment(): Promise<this>;

  interface: RateLimiterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getCurrentInboundCapacity: TypedContractMethod<
    [chainId_: BigNumberish],
    [bigint],
    "view"
  >;

  getCurrentOutboundCapacity: TypedContractMethod<[], [bigint], "view">;

  getInboundQueuedTransfer: TypedContractMethod<
    [digest: BytesLike],
    [IRateLimiter.InboundQueuedTransferStructOutput],
    "view"
  >;

  getOutboundQueuedTransfer: TypedContractMethod<
    [queueSequence: BigNumberish],
    [IRateLimiter.OutboundQueuedTransferStructOutput],
    "view"
  >;

  rateLimitDuration: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getCurrentInboundCapacity"
  ): TypedContractMethod<[chainId_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentOutboundCapacity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getInboundQueuedTransfer"
  ): TypedContractMethod<
    [digest: BytesLike],
    [IRateLimiter.InboundQueuedTransferStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOutboundQueuedTransfer"
  ): TypedContractMethod<
    [queueSequence: BigNumberish],
    [IRateLimiter.OutboundQueuedTransferStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "rateLimitDuration"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "InboundTransferQueued"
  ): TypedContractEvent<
    InboundTransferQueuedEvent.InputTuple,
    InboundTransferQueuedEvent.OutputTuple,
    InboundTransferQueuedEvent.OutputObject
  >;
  getEvent(
    key: "OutboundTransferQueued"
  ): TypedContractEvent<
    OutboundTransferQueuedEvent.InputTuple,
    OutboundTransferQueuedEvent.OutputTuple,
    OutboundTransferQueuedEvent.OutputObject
  >;
  getEvent(
    key: "OutboundTransferRateLimited"
  ): TypedContractEvent<
    OutboundTransferRateLimitedEvent.InputTuple,
    OutboundTransferRateLimitedEvent.OutputTuple,
    OutboundTransferRateLimitedEvent.OutputObject
  >;

  filters: {
    "InboundTransferQueued(bytes32)": TypedContractEvent<
      InboundTransferQueuedEvent.InputTuple,
      InboundTransferQueuedEvent.OutputTuple,
      InboundTransferQueuedEvent.OutputObject
    >;
    InboundTransferQueued: TypedContractEvent<
      InboundTransferQueuedEvent.InputTuple,
      InboundTransferQueuedEvent.OutputTuple,
      InboundTransferQueuedEvent.OutputObject
    >;

    "OutboundTransferQueued(uint64)": TypedContractEvent<
      OutboundTransferQueuedEvent.InputTuple,
      OutboundTransferQueuedEvent.OutputTuple,
      OutboundTransferQueuedEvent.OutputObject
    >;
    OutboundTransferQueued: TypedContractEvent<
      OutboundTransferQueuedEvent.InputTuple,
      OutboundTransferQueuedEvent.OutputTuple,
      OutboundTransferQueuedEvent.OutputObject
    >;

    "OutboundTransferRateLimited(address,uint64,uint256,uint256)": TypedContractEvent<
      OutboundTransferRateLimitedEvent.InputTuple,
      OutboundTransferRateLimitedEvent.OutputTuple,
      OutboundTransferRateLimitedEvent.OutputObject
    >;
    OutboundTransferRateLimited: TypedContractEvent<
      OutboundTransferRateLimitedEvent.InputTuple,
      OutboundTransferRateLimitedEvent.OutputTuple,
      OutboundTransferRateLimitedEvent.OutputObject
    >;
  };
}
