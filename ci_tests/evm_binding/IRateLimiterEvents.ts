/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "./common";

export interface IRateLimiterEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "InboundTransferQueued"
      | "OutboundTransferQueued"
      | "OutboundTransferRateLimited"
  ): EventFragment;
}

export namespace InboundTransferQueuedEvent {
  export type InputTuple = [digest: BytesLike];
  export type OutputTuple = [digest: string];
  export interface OutputObject {
    digest: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OutboundTransferQueuedEvent {
  export type InputTuple = [queueSequence: BigNumberish];
  export type OutputTuple = [queueSequence: bigint];
  export interface OutputObject {
    queueSequence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OutboundTransferRateLimitedEvent {
  export type InputTuple = [
    sender: AddressLike,
    sequence: BigNumberish,
    amount: BigNumberish,
    currentCapacity: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    sequence: bigint,
    amount: bigint,
    currentCapacity: bigint
  ];
  export interface OutputObject {
    sender: string;
    sequence: bigint;
    amount: bigint;
    currentCapacity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRateLimiterEvents extends BaseContract {
  connect(runner?: ContractRunner | null): IRateLimiterEvents;
  waitForDeployment(): Promise<this>;

  interface: IRateLimiterEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "InboundTransferQueued"
  ): TypedContractEvent<
    InboundTransferQueuedEvent.InputTuple,
    InboundTransferQueuedEvent.OutputTuple,
    InboundTransferQueuedEvent.OutputObject
  >;
  getEvent(
    key: "OutboundTransferQueued"
  ): TypedContractEvent<
    OutboundTransferQueuedEvent.InputTuple,
    OutboundTransferQueuedEvent.OutputTuple,
    OutboundTransferQueuedEvent.OutputObject
  >;
  getEvent(
    key: "OutboundTransferRateLimited"
  ): TypedContractEvent<
    OutboundTransferRateLimitedEvent.InputTuple,
    OutboundTransferRateLimitedEvent.OutputTuple,
    OutboundTransferRateLimitedEvent.OutputObject
  >;

  filters: {
    "InboundTransferQueued(bytes32)": TypedContractEvent<
      InboundTransferQueuedEvent.InputTuple,
      InboundTransferQueuedEvent.OutputTuple,
      InboundTransferQueuedEvent.OutputObject
    >;
    InboundTransferQueued: TypedContractEvent<
      InboundTransferQueuedEvent.InputTuple,
      InboundTransferQueuedEvent.OutputTuple,
      InboundTransferQueuedEvent.OutputObject
    >;

    "OutboundTransferQueued(uint64)": TypedContractEvent<
      OutboundTransferQueuedEvent.InputTuple,
      OutboundTransferQueuedEvent.OutputTuple,
      OutboundTransferQueuedEvent.OutputObject
    >;
    OutboundTransferQueued: TypedContractEvent<
      OutboundTransferQueuedEvent.InputTuple,
      OutboundTransferQueuedEvent.OutputTuple,
      OutboundTransferQueuedEvent.OutputObject
    >;

    "OutboundTransferRateLimited(address,uint64,uint256,uint256)": TypedContractEvent<
      OutboundTransferRateLimitedEvent.InputTuple,
      OutboundTransferRateLimitedEvent.OutputTuple,
      OutboundTransferRateLimitedEvent.OutputObject
    >;
    OutboundTransferRateLimited: TypedContractEvent<
      OutboundTransferRateLimitedEvent.InputTuple,
      OutboundTransferRateLimitedEvent.OutputTuple,
      OutboundTransferRateLimitedEvent.OutputObject
    >;
  };
}
