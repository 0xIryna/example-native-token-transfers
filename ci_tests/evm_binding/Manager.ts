/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type NormalizedAmountStruct = {
  amount: BigNumberish;
  decimals: BigNumberish;
};

export type NormalizedAmountStructOutput = [
  amount: bigint,
  decimals: bigint
] & { amount: bigint; decimals: bigint };

export declare namespace EndpointStructs {
  export type ManagerMessageStruct = {
    sequence: BigNumberish;
    sender: BytesLike;
    payload: BytesLike;
  };

  export type ManagerMessageStructOutput = [
    sequence: bigint,
    sender: string,
    payload: string
  ] & { sequence: bigint; sender: string; payload: string };

  export type EndpointInstructionStruct = {
    index: BigNumberish;
    payload: BytesLike;
  };

  export type EndpointInstructionStructOutput = [
    index: bigint,
    payload: string
  ] & { index: bigint; payload: string };
}

export declare namespace IRateLimiter {
  export type InboundQueuedTransferStruct = {
    amount: NormalizedAmountStruct;
    txTimestamp: BigNumberish;
    recipient: AddressLike;
  };

  export type InboundQueuedTransferStructOutput = [
    amount: NormalizedAmountStructOutput,
    txTimestamp: bigint,
    recipient: string
  ] & {
    amount: NormalizedAmountStructOutput;
    txTimestamp: bigint;
    recipient: string;
  };

  export type OutboundQueuedTransferStruct = {
    recipient: BytesLike;
    amount: NormalizedAmountStruct;
    txTimestamp: BigNumberish;
    recipientChain: BigNumberish;
    sender: AddressLike;
    endpointInstructions: BytesLike;
  };

  export type OutboundQueuedTransferStructOutput = [
    recipient: string,
    amount: NormalizedAmountStructOutput,
    txTimestamp: bigint,
    recipientChain: bigint,
    sender: string,
    endpointInstructions: string
  ] & {
    recipient: string;
    amount: NormalizedAmountStructOutput;
    txTimestamp: bigint;
    recipientChain: bigint;
    sender: string;
    endpointInstructions: string;
  };
}

export interface ManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "attestationReceived"
      | "chainId"
      | "completeInboundQueuedTransfer"
      | "completeOutboundQueuedTransfer"
      | "endpointAttestedToMessage"
      | "executeMsg"
      | "getCurrentInboundCapacity"
      | "getCurrentOutboundCapacity"
      | "getEndpoints"
      | "getInboundQueuedTransfer"
      | "getMigratesImmutables"
      | "getOutboundQueuedTransfer"
      | "getThreshold"
      | "initialize"
      | "isMessageApproved"
      | "isMessageExecuted"
      | "isPaused"
      | "migrate"
      | "mode"
      | "nextMessageSequence"
      | "owner"
      | "pause"
      | "pauser"
      | "quoteDeliveryPrice"
      | "rateLimitDuration"
      | "removeEndpoint"
      | "setEndpoint"
      | "setInboundLimit"
      | "setOutboundLimit"
      | "setSibling"
      | "setThreshold"
      | "token"
      | "transfer(uint256,uint16,bytes32)"
      | "transfer(uint256,uint16,bytes32,bool,bytes)"
      | "transferOwnership"
      | "transferPauserCapability"
      | "upgrade"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "EndpointAdded(address)"
      | "EndpointAdded(address,uint256,uint8)"
      | "EndpointRemoved(address)"
      | "EndpointRemoved(address,uint8)"
      | "InboundTransferQueued"
      | "Initialized"
      | "MessageAlreadyExecuted"
      | "MessageAttestedTo"
      | "NotPaused"
      | "OutboundTransferQueued"
      | "OutboundTransferRateLimited"
      | "OwnershipTransferred"
      | "Paused"
      | "PauserTransferred"
      | "SiblingUpdated"
      | "ThresholdChanged"
      | "TransferRedeemed"
      | "TransferSent"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "attestationReceived",
    values: [BigNumberish, BytesLike, EndpointStructs.ManagerMessageStruct]
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "completeInboundQueuedTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "completeOutboundQueuedTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endpointAttestedToMessage",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMsg",
    values: [BigNumberish, BytesLike, EndpointStructs.ManagerMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentInboundCapacity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentOutboundCapacity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEndpoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInboundQueuedTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMigratesImmutables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOutboundQueuedTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMessageApproved",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMessageExecuted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(functionFragment: "migrate", values?: undefined): string;
  encodeFunctionData(functionFragment: "mode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextMessageSequence",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "pauser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteDeliveryPrice",
    values: [
      BigNumberish,
      EndpointStructs.EndpointInstructionStruct[],
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rateLimitDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeEndpoint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEndpoint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInboundLimit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOutboundLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSibling",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transfer(uint256,uint16,bytes32)",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer(uint256,uint16,bytes32,bool,bytes)",
    values: [BigNumberish, BigNumberish, BytesLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPauserCapability",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "attestationReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeInboundQueuedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeOutboundQueuedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endpointAttestedToMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executeMsg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentInboundCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentOutboundCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEndpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInboundQueuedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMigratesImmutables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutboundQueuedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMessageApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMessageExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextMessageSequence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteDeliveryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateLimitDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInboundLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOutboundLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSibling", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transfer(uint256,uint16,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transfer(uint256,uint16,bytes32,bool,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPauserCapability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EndpointAdded_address_Event {
  export type InputTuple = [endpoint: AddressLike];
  export type OutputTuple = [endpoint: string];
  export interface OutputObject {
    endpoint: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EndpointAdded_address_uint256_uint8_Event {
  export type InputTuple = [
    endpoint: AddressLike,
    endpointsNum: BigNumberish,
    threshold: BigNumberish
  ];
  export type OutputTuple = [
    endpoint: string,
    endpointsNum: bigint,
    threshold: bigint
  ];
  export interface OutputObject {
    endpoint: string;
    endpointsNum: bigint;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EndpointRemoved_address_Event {
  export type InputTuple = [endpoint: AddressLike];
  export type OutputTuple = [endpoint: string];
  export interface OutputObject {
    endpoint: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EndpointRemoved_address_uint8_Event {
  export type InputTuple = [endpoint: AddressLike, threshold: BigNumberish];
  export type OutputTuple = [endpoint: string, threshold: bigint];
  export interface OutputObject {
    endpoint: string;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InboundTransferQueuedEvent {
  export type InputTuple = [digest: BytesLike];
  export type OutputTuple = [digest: string];
  export interface OutputObject {
    digest: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageAlreadyExecutedEvent {
  export type InputTuple = [sourceManager: BytesLike, msgHash: BytesLike];
  export type OutputTuple = [sourceManager: string, msgHash: string];
  export interface OutputObject {
    sourceManager: string;
    msgHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageAttestedToEvent {
  export type InputTuple = [
    digest: BytesLike,
    endpoint: AddressLike,
    index: BigNumberish
  ];
  export type OutputTuple = [digest: string, endpoint: string, index: bigint];
  export interface OutputObject {
    digest: string;
    endpoint: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NotPausedEvent {
  export type InputTuple = [notPaused: boolean];
  export type OutputTuple = [notPaused: boolean];
  export interface OutputObject {
    notPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OutboundTransferQueuedEvent {
  export type InputTuple = [queueSequence: BigNumberish];
  export type OutputTuple = [queueSequence: bigint];
  export interface OutputObject {
    queueSequence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OutboundTransferRateLimitedEvent {
  export type InputTuple = [
    sender: AddressLike,
    sequence: BigNumberish,
    amount: BigNumberish,
    currentCapacity: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    sequence: bigint,
    amount: bigint,
    currentCapacity: bigint
  ];
  export interface OutputObject {
    sender: string;
    sequence: bigint;
    amount: bigint;
    currentCapacity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [paused: boolean];
  export type OutputTuple = [paused: boolean];
  export interface OutputObject {
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauserTransferredEvent {
  export type InputTuple = [oldPauser: AddressLike, newPauser: AddressLike];
  export type OutputTuple = [oldPauser: string, newPauser: string];
  export interface OutputObject {
    oldPauser: string;
    newPauser: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SiblingUpdatedEvent {
  export type InputTuple = [
    chainId_: BigNumberish,
    oldSiblingContract: BytesLike,
    siblingContract: BytesLike
  ];
  export type OutputTuple = [
    chainId_: bigint,
    oldSiblingContract: string,
    siblingContract: string
  ];
  export interface OutputObject {
    chainId_: bigint;
    oldSiblingContract: string;
    siblingContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ThresholdChangedEvent {
  export type InputTuple = [
    oldThreshold: BigNumberish,
    threshold: BigNumberish
  ];
  export type OutputTuple = [oldThreshold: bigint, threshold: bigint];
  export interface OutputObject {
    oldThreshold: bigint;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferRedeemedEvent {
  export type InputTuple = [digest: BytesLike];
  export type OutputTuple = [digest: string];
  export interface OutputObject {
    digest: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSentEvent {
  export type InputTuple = [
    recipient: BytesLike,
    amount: BigNumberish,
    recipientChain: BigNumberish,
    msgSequence: BigNumberish
  ];
  export type OutputTuple = [
    recipient: string,
    amount: bigint,
    recipientChain: bigint,
    msgSequence: bigint
  ];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
    recipientChain: bigint;
    msgSequence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Manager extends BaseContract {
  connect(runner?: ContractRunner | null): Manager;
  waitForDeployment(): Promise<this>;

  interface: ManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  attestationReceived: TypedContractMethod<
    [
      sourceChainId: BigNumberish,
      sourceManagerAddress: BytesLike,
      payload: EndpointStructs.ManagerMessageStruct
    ],
    [void],
    "nonpayable"
  >;

  chainId: TypedContractMethod<[], [bigint], "view">;

  completeInboundQueuedTransfer: TypedContractMethod<
    [digest: BytesLike],
    [void],
    "nonpayable"
  >;

  completeOutboundQueuedTransfer: TypedContractMethod<
    [messageSequence: BigNumberish],
    [bigint],
    "payable"
  >;

  endpointAttestedToMessage: TypedContractMethod<
    [digest: BytesLike, index: BigNumberish],
    [boolean],
    "view"
  >;

  executeMsg: TypedContractMethod<
    [
      sourceChainId: BigNumberish,
      sourceManagerAddress: BytesLike,
      message: EndpointStructs.ManagerMessageStruct
    ],
    [void],
    "nonpayable"
  >;

  getCurrentInboundCapacity: TypedContractMethod<
    [chainId_: BigNumberish],
    [bigint],
    "view"
  >;

  getCurrentOutboundCapacity: TypedContractMethod<[], [bigint], "view">;

  getEndpoints: TypedContractMethod<[], [string[]], "view">;

  getInboundQueuedTransfer: TypedContractMethod<
    [digest: BytesLike],
    [IRateLimiter.InboundQueuedTransferStructOutput],
    "view"
  >;

  getMigratesImmutables: TypedContractMethod<[], [boolean], "view">;

  getOutboundQueuedTransfer: TypedContractMethod<
    [queueSequence: BigNumberish],
    [IRateLimiter.OutboundQueuedTransferStructOutput],
    "view"
  >;

  getThreshold: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isMessageApproved: TypedContractMethod<
    [digest: BytesLike],
    [boolean],
    "view"
  >;

  isMessageExecuted: TypedContractMethod<
    [digest: BytesLike],
    [boolean],
    "view"
  >;

  isPaused: TypedContractMethod<[], [boolean], "view">;

  migrate: TypedContractMethod<[], [void], "nonpayable">;

  mode: TypedContractMethod<[], [bigint], "view">;

  nextMessageSequence: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  pauser: TypedContractMethod<[], [string], "view">;

  quoteDeliveryPrice: TypedContractMethod<
    [
      recipientChain: BigNumberish,
      endpointInstructions: EndpointStructs.EndpointInstructionStruct[],
      enabledEndpoints: AddressLike[]
    ],
    [[bigint[], bigint]],
    "view"
  >;

  rateLimitDuration: TypedContractMethod<[], [bigint], "view">;

  removeEndpoint: TypedContractMethod<
    [endpoint: AddressLike],
    [void],
    "nonpayable"
  >;

  setEndpoint: TypedContractMethod<
    [endpoint: AddressLike],
    [void],
    "nonpayable"
  >;

  setInboundLimit: TypedContractMethod<
    [limit: BigNumberish, chainId_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOutboundLimit: TypedContractMethod<
    [limit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSibling: TypedContractMethod<
    [siblingChainId: BigNumberish, siblingContract: BytesLike],
    [void],
    "nonpayable"
  >;

  setThreshold: TypedContractMethod<
    [threshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  "transfer(uint256,uint16,bytes32)": TypedContractMethod<
    [amount: BigNumberish, recipientChain: BigNumberish, recipient: BytesLike],
    [bigint],
    "payable"
  >;

  "transfer(uint256,uint16,bytes32,bool,bytes)": TypedContractMethod<
    [
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      shouldQueue: boolean,
      endpointInstructions: BytesLike
    ],
    [bigint],
    "payable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferPauserCapability: TypedContractMethod<
    [newPauser: AddressLike],
    [void],
    "nonpayable"
  >;

  upgrade: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "attestationReceived"
  ): TypedContractMethod<
    [
      sourceChainId: BigNumberish,
      sourceManagerAddress: BytesLike,
      payload: EndpointStructs.ManagerMessageStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "chainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "completeInboundQueuedTransfer"
  ): TypedContractMethod<[digest: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeOutboundQueuedTransfer"
  ): TypedContractMethod<[messageSequence: BigNumberish], [bigint], "payable">;
  getFunction(
    nameOrSignature: "endpointAttestedToMessage"
  ): TypedContractMethod<
    [digest: BytesLike, index: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeMsg"
  ): TypedContractMethod<
    [
      sourceChainId: BigNumberish,
      sourceManagerAddress: BytesLike,
      message: EndpointStructs.ManagerMessageStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCurrentInboundCapacity"
  ): TypedContractMethod<[chainId_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentOutboundCapacity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEndpoints"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getInboundQueuedTransfer"
  ): TypedContractMethod<
    [digest: BytesLike],
    [IRateLimiter.InboundQueuedTransferStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMigratesImmutables"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getOutboundQueuedTransfer"
  ): TypedContractMethod<
    [queueSequence: BigNumberish],
    [IRateLimiter.OutboundQueuedTransferStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isMessageApproved"
  ): TypedContractMethod<[digest: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMessageExecuted"
  ): TypedContractMethod<[digest: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "migrate"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mode"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextMessageSequence"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pauser"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quoteDeliveryPrice"
  ): TypedContractMethod<
    [
      recipientChain: BigNumberish,
      endpointInstructions: EndpointStructs.EndpointInstructionStruct[],
      enabledEndpoints: AddressLike[]
    ],
    [[bigint[], bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "rateLimitDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeEndpoint"
  ): TypedContractMethod<[endpoint: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEndpoint"
  ): TypedContractMethod<[endpoint: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInboundLimit"
  ): TypedContractMethod<
    [limit: BigNumberish, chainId_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOutboundLimit"
  ): TypedContractMethod<[limit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSibling"
  ): TypedContractMethod<
    [siblingChainId: BigNumberish, siblingContract: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setThreshold"
  ): TypedContractMethod<[threshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transfer(uint256,uint16,bytes32)"
  ): TypedContractMethod<
    [amount: BigNumberish, recipientChain: BigNumberish, recipient: BytesLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transfer(uint256,uint16,bytes32,bool,bytes)"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      shouldQueue: boolean,
      endpointInstructions: BytesLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferPauserCapability"
  ): TypedContractMethod<[newPauser: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgrade"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "EndpointAdded(address)"
  ): TypedContractEvent<
    EndpointAdded_address_Event.InputTuple,
    EndpointAdded_address_Event.OutputTuple,
    EndpointAdded_address_Event.OutputObject
  >;
  getEvent(
    key: "EndpointAdded(address,uint256,uint8)"
  ): TypedContractEvent<
    EndpointAdded_address_uint256_uint8_Event.InputTuple,
    EndpointAdded_address_uint256_uint8_Event.OutputTuple,
    EndpointAdded_address_uint256_uint8_Event.OutputObject
  >;
  getEvent(
    key: "EndpointRemoved(address)"
  ): TypedContractEvent<
    EndpointRemoved_address_Event.InputTuple,
    EndpointRemoved_address_Event.OutputTuple,
    EndpointRemoved_address_Event.OutputObject
  >;
  getEvent(
    key: "EndpointRemoved(address,uint8)"
  ): TypedContractEvent<
    EndpointRemoved_address_uint8_Event.InputTuple,
    EndpointRemoved_address_uint8_Event.OutputTuple,
    EndpointRemoved_address_uint8_Event.OutputObject
  >;
  getEvent(
    key: "InboundTransferQueued"
  ): TypedContractEvent<
    InboundTransferQueuedEvent.InputTuple,
    InboundTransferQueuedEvent.OutputTuple,
    InboundTransferQueuedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MessageAlreadyExecuted"
  ): TypedContractEvent<
    MessageAlreadyExecutedEvent.InputTuple,
    MessageAlreadyExecutedEvent.OutputTuple,
    MessageAlreadyExecutedEvent.OutputObject
  >;
  getEvent(
    key: "MessageAttestedTo"
  ): TypedContractEvent<
    MessageAttestedToEvent.InputTuple,
    MessageAttestedToEvent.OutputTuple,
    MessageAttestedToEvent.OutputObject
  >;
  getEvent(
    key: "NotPaused"
  ): TypedContractEvent<
    NotPausedEvent.InputTuple,
    NotPausedEvent.OutputTuple,
    NotPausedEvent.OutputObject
  >;
  getEvent(
    key: "OutboundTransferQueued"
  ): TypedContractEvent<
    OutboundTransferQueuedEvent.InputTuple,
    OutboundTransferQueuedEvent.OutputTuple,
    OutboundTransferQueuedEvent.OutputObject
  >;
  getEvent(
    key: "OutboundTransferRateLimited"
  ): TypedContractEvent<
    OutboundTransferRateLimitedEvent.InputTuple,
    OutboundTransferRateLimitedEvent.OutputTuple,
    OutboundTransferRateLimitedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PauserTransferred"
  ): TypedContractEvent<
    PauserTransferredEvent.InputTuple,
    PauserTransferredEvent.OutputTuple,
    PauserTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SiblingUpdated"
  ): TypedContractEvent<
    SiblingUpdatedEvent.InputTuple,
    SiblingUpdatedEvent.OutputTuple,
    SiblingUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ThresholdChanged"
  ): TypedContractEvent<
    ThresholdChangedEvent.InputTuple,
    ThresholdChangedEvent.OutputTuple,
    ThresholdChangedEvent.OutputObject
  >;
  getEvent(
    key: "TransferRedeemed"
  ): TypedContractEvent<
    TransferRedeemedEvent.InputTuple,
    TransferRedeemedEvent.OutputTuple,
    TransferRedeemedEvent.OutputObject
  >;
  getEvent(
    key: "TransferSent"
  ): TypedContractEvent<
    TransferSentEvent.InputTuple,
    TransferSentEvent.OutputTuple,
    TransferSentEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "EndpointAdded(address)": TypedContractEvent<
      EndpointAdded_address_Event.InputTuple,
      EndpointAdded_address_Event.OutputTuple,
      EndpointAdded_address_Event.OutputObject
    >;
    "EndpointAdded(address,uint256,uint8)": TypedContractEvent<
      EndpointAdded_address_uint256_uint8_Event.InputTuple,
      EndpointAdded_address_uint256_uint8_Event.OutputTuple,
      EndpointAdded_address_uint256_uint8_Event.OutputObject
    >;
    "EndpointRemoved(address)": TypedContractEvent<
      EndpointRemoved_address_Event.InputTuple,
      EndpointRemoved_address_Event.OutputTuple,
      EndpointRemoved_address_Event.OutputObject
    >;
    "EndpointRemoved(address,uint8)": TypedContractEvent<
      EndpointRemoved_address_uint8_Event.InputTuple,
      EndpointRemoved_address_uint8_Event.OutputTuple,
      EndpointRemoved_address_uint8_Event.OutputObject
    >;

    "InboundTransferQueued(bytes32)": TypedContractEvent<
      InboundTransferQueuedEvent.InputTuple,
      InboundTransferQueuedEvent.OutputTuple,
      InboundTransferQueuedEvent.OutputObject
    >;
    InboundTransferQueued: TypedContractEvent<
      InboundTransferQueuedEvent.InputTuple,
      InboundTransferQueuedEvent.OutputTuple,
      InboundTransferQueuedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MessageAlreadyExecuted(bytes32,bytes32)": TypedContractEvent<
      MessageAlreadyExecutedEvent.InputTuple,
      MessageAlreadyExecutedEvent.OutputTuple,
      MessageAlreadyExecutedEvent.OutputObject
    >;
    MessageAlreadyExecuted: TypedContractEvent<
      MessageAlreadyExecutedEvent.InputTuple,
      MessageAlreadyExecutedEvent.OutputTuple,
      MessageAlreadyExecutedEvent.OutputObject
    >;

    "MessageAttestedTo(bytes32,address,uint8)": TypedContractEvent<
      MessageAttestedToEvent.InputTuple,
      MessageAttestedToEvent.OutputTuple,
      MessageAttestedToEvent.OutputObject
    >;
    MessageAttestedTo: TypedContractEvent<
      MessageAttestedToEvent.InputTuple,
      MessageAttestedToEvent.OutputTuple,
      MessageAttestedToEvent.OutputObject
    >;

    "NotPaused(bool)": TypedContractEvent<
      NotPausedEvent.InputTuple,
      NotPausedEvent.OutputTuple,
      NotPausedEvent.OutputObject
    >;
    NotPaused: TypedContractEvent<
      NotPausedEvent.InputTuple,
      NotPausedEvent.OutputTuple,
      NotPausedEvent.OutputObject
    >;

    "OutboundTransferQueued(uint64)": TypedContractEvent<
      OutboundTransferQueuedEvent.InputTuple,
      OutboundTransferQueuedEvent.OutputTuple,
      OutboundTransferQueuedEvent.OutputObject
    >;
    OutboundTransferQueued: TypedContractEvent<
      OutboundTransferQueuedEvent.InputTuple,
      OutboundTransferQueuedEvent.OutputTuple,
      OutboundTransferQueuedEvent.OutputObject
    >;

    "OutboundTransferRateLimited(address,uint64,uint256,uint256)": TypedContractEvent<
      OutboundTransferRateLimitedEvent.InputTuple,
      OutboundTransferRateLimitedEvent.OutputTuple,
      OutboundTransferRateLimitedEvent.OutputObject
    >;
    OutboundTransferRateLimited: TypedContractEvent<
      OutboundTransferRateLimitedEvent.InputTuple,
      OutboundTransferRateLimitedEvent.OutputTuple,
      OutboundTransferRateLimitedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(bool)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PauserTransferred(address,address)": TypedContractEvent<
      PauserTransferredEvent.InputTuple,
      PauserTransferredEvent.OutputTuple,
      PauserTransferredEvent.OutputObject
    >;
    PauserTransferred: TypedContractEvent<
      PauserTransferredEvent.InputTuple,
      PauserTransferredEvent.OutputTuple,
      PauserTransferredEvent.OutputObject
    >;

    "SiblingUpdated(uint16,bytes32,bytes32)": TypedContractEvent<
      SiblingUpdatedEvent.InputTuple,
      SiblingUpdatedEvent.OutputTuple,
      SiblingUpdatedEvent.OutputObject
    >;
    SiblingUpdated: TypedContractEvent<
      SiblingUpdatedEvent.InputTuple,
      SiblingUpdatedEvent.OutputTuple,
      SiblingUpdatedEvent.OutputObject
    >;

    "ThresholdChanged(uint8,uint8)": TypedContractEvent<
      ThresholdChangedEvent.InputTuple,
      ThresholdChangedEvent.OutputTuple,
      ThresholdChangedEvent.OutputObject
    >;
    ThresholdChanged: TypedContractEvent<
      ThresholdChangedEvent.InputTuple,
      ThresholdChangedEvent.OutputTuple,
      ThresholdChangedEvent.OutputObject
    >;

    "TransferRedeemed(bytes32)": TypedContractEvent<
      TransferRedeemedEvent.InputTuple,
      TransferRedeemedEvent.OutputTuple,
      TransferRedeemedEvent.OutputObject
    >;
    TransferRedeemed: TypedContractEvent<
      TransferRedeemedEvent.InputTuple,
      TransferRedeemedEvent.OutputTuple,
      TransferRedeemedEvent.OutputObject
    >;

    "TransferSent(bytes32,uint256,uint16,uint64)": TypedContractEvent<
      TransferSentEvent.InputTuple,
      TransferSentEvent.OutputTuple,
      TransferSentEvent.OutputObject
    >;
    TransferSent: TypedContractEvent<
      TransferSentEvent.InputTuple,
      TransferSentEvent.OutputTuple,
      TransferSentEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
