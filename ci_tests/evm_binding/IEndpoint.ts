/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace EndpointStructs {
  export type EndpointInstructionStruct = {
    index: BigNumberish;
    payload: BytesLike;
  };

  export type EndpointInstructionStructOutput = [
    index: bigint,
    payload: string
  ] & { index: bigint; payload: string };
}

export interface IEndpointInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "quoteDeliveryPrice"
      | "sendMessage"
      | "transferEndpointOwnership"
      | "upgrade"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "quoteDeliveryPrice",
    values: [BigNumberish, EndpointStructs.EndpointInstructionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [
      BigNumberish,
      EndpointStructs.EndpointInstructionStruct,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferEndpointOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "quoteDeliveryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferEndpointOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
}

export interface IEndpoint extends BaseContract {
  connect(runner?: ContractRunner | null): IEndpoint;
  waitForDeployment(): Promise<this>;

  interface: IEndpointInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  quoteDeliveryPrice: TypedContractMethod<
    [
      recipientChain: BigNumberish,
      instruction: EndpointStructs.EndpointInstructionStruct
    ],
    [bigint],
    "view"
  >;

  sendMessage: TypedContractMethod<
    [
      recipientChain: BigNumberish,
      instruction: EndpointStructs.EndpointInstructionStruct,
      managerMessage: BytesLike,
      recipientManagerAddress: BytesLike
    ],
    [void],
    "payable"
  >;

  transferEndpointOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgrade: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "quoteDeliveryPrice"
  ): TypedContractMethod<
    [
      recipientChain: BigNumberish,
      instruction: EndpointStructs.EndpointInstructionStruct
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<
    [
      recipientChain: BigNumberish,
      instruction: EndpointStructs.EndpointInstructionStruct,
      managerMessage: BytesLike,
      recipientManagerAddress: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferEndpointOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgrade"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
