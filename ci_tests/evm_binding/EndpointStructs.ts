/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type NormalizedAmountStruct = {
  amount: BigNumberish;
  decimals: BigNumberish;
};

export type NormalizedAmountStructOutput = [
  amount: bigint,
  decimals: bigint
] & { amount: bigint; decimals: bigint };

export declare namespace EndpointStructs {
  export type EndpointMessageStruct = {
    sourceManagerAddress: BytesLike;
    recipientManagerAddress: BytesLike;
    managerPayload: BytesLike;
    endpointPayload: BytesLike;
  };

  export type EndpointMessageStructOutput = [
    sourceManagerAddress: string,
    recipientManagerAddress: string,
    managerPayload: string,
    endpointPayload: string
  ] & {
    sourceManagerAddress: string;
    recipientManagerAddress: string;
    managerPayload: string;
    endpointPayload: string;
  };

  export type EndpointInstructionStruct = {
    index: BigNumberish;
    payload: BytesLike;
  };

  export type EndpointInstructionStructOutput = [
    index: bigint,
    payload: string
  ] & { index: bigint; payload: string };

  export type ManagerMessageStruct = {
    sequence: BigNumberish;
    sender: BytesLike;
    payload: BytesLike;
  };

  export type ManagerMessageStructOutput = [
    sequence: bigint,
    sender: string,
    payload: string
  ] & { sequence: bigint; sender: string; payload: string };

  export type NativeTokenTransferStruct = {
    amount: NormalizedAmountStruct;
    sourceToken: BytesLike;
    to: BytesLike;
    toChain: BigNumberish;
  };

  export type NativeTokenTransferStructOutput = [
    amount: NormalizedAmountStructOutput,
    sourceToken: string,
    to: string,
    toChain: bigint
  ] & {
    amount: NormalizedAmountStructOutput;
    sourceToken: string;
    to: string;
    toChain: bigint;
  };
}

export interface EndpointStructsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buildAndEncodeEndpointMessage"
      | "encodeEndpointInstruction"
      | "encodeEndpointInstructions"
      | "encodeEndpointMessage"
      | "encodeManagerMessage"
      | "encodeNativeTokenTransfer"
      | "managerMessageDigest"
      | "parseEndpointAndManagerMessage"
      | "parseEndpointInstructionChecked"
      | "parseEndpointInstructionUnchecked"
      | "parseEndpointInstructions"
      | "parseManagerMessage"
      | "parseNativeTokenTransfer"
      | "sortEndpointInstructions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buildAndEncodeEndpointMessage",
    values: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeEndpointInstruction",
    values: [EndpointStructs.EndpointInstructionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeEndpointInstructions",
    values: [EndpointStructs.EndpointInstructionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeEndpointMessage",
    values: [BytesLike, EndpointStructs.EndpointMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeManagerMessage",
    values: [EndpointStructs.ManagerMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeNativeTokenTransfer",
    values: [EndpointStructs.NativeTokenTransferStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "managerMessageDigest",
    values: [BigNumberish, EndpointStructs.ManagerMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "parseEndpointAndManagerMessage",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseEndpointInstructionChecked",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseEndpointInstructionUnchecked",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "parseEndpointInstructions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseManagerMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseNativeTokenTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sortEndpointInstructions",
    values: [EndpointStructs.EndpointInstructionStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "buildAndEncodeEndpointMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeEndpointInstruction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeEndpointInstructions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeEndpointMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeManagerMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeNativeTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerMessageDigest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseEndpointAndManagerMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseEndpointInstructionChecked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseEndpointInstructionUnchecked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseEndpointInstructions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseManagerMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseNativeTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sortEndpointInstructions",
    data: BytesLike
  ): Result;
}

export interface EndpointStructs extends BaseContract {
  connect(runner?: ContractRunner | null): EndpointStructs;
  waitForDeployment(): Promise<this>;

  interface: EndpointStructsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buildAndEncodeEndpointMessage: TypedContractMethod<
    [
      prefix: BytesLike,
      sourceManagerAddress: BytesLike,
      recipientManagerAddress: BytesLike,
      managerMessage: BytesLike,
      endpointPayload: BytesLike
    ],
    [[EndpointStructs.EndpointMessageStructOutput, string]],
    "view"
  >;

  encodeEndpointInstruction: TypedContractMethod<
    [instruction: EndpointStructs.EndpointInstructionStruct],
    [string],
    "view"
  >;

  encodeEndpointInstructions: TypedContractMethod<
    [instructions: EndpointStructs.EndpointInstructionStruct[]],
    [string],
    "view"
  >;

  encodeEndpointMessage: TypedContractMethod<
    [prefix: BytesLike, m: EndpointStructs.EndpointMessageStruct],
    [string],
    "view"
  >;

  encodeManagerMessage: TypedContractMethod<
    [m: EndpointStructs.ManagerMessageStruct],
    [string],
    "view"
  >;

  encodeNativeTokenTransfer: TypedContractMethod<
    [m: EndpointStructs.NativeTokenTransferStruct],
    [string],
    "view"
  >;

  managerMessageDigest: TypedContractMethod<
    [sourceChainId: BigNumberish, m: EndpointStructs.ManagerMessageStruct],
    [string],
    "view"
  >;

  parseEndpointAndManagerMessage: TypedContractMethod<
    [expectedPrefix: BytesLike, payload: BytesLike],
    [
      [
        EndpointStructs.EndpointMessageStructOutput,
        EndpointStructs.ManagerMessageStructOutput
      ]
    ],
    "view"
  >;

  parseEndpointInstructionChecked: TypedContractMethod<
    [encoded: BytesLike],
    [EndpointStructs.EndpointInstructionStructOutput],
    "view"
  >;

  parseEndpointInstructionUnchecked: TypedContractMethod<
    [encoded: BytesLike, offset: BigNumberish],
    [
      [EndpointStructs.EndpointInstructionStructOutput, bigint] & {
        instruction: EndpointStructs.EndpointInstructionStructOutput;
        nextOffset: bigint;
      }
    ],
    "view"
  >;

  parseEndpointInstructions: TypedContractMethod<
    [encoded: BytesLike],
    [EndpointStructs.EndpointInstructionStructOutput[]],
    "view"
  >;

  parseManagerMessage: TypedContractMethod<
    [encoded: BytesLike],
    [EndpointStructs.ManagerMessageStructOutput],
    "view"
  >;

  parseNativeTokenTransfer: TypedContractMethod<
    [encoded: BytesLike],
    [EndpointStructs.NativeTokenTransferStructOutput],
    "view"
  >;

  sortEndpointInstructions: TypedContractMethod<
    [instructions: EndpointStructs.EndpointInstructionStruct[]],
    [EndpointStructs.EndpointInstructionStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buildAndEncodeEndpointMessage"
  ): TypedContractMethod<
    [
      prefix: BytesLike,
      sourceManagerAddress: BytesLike,
      recipientManagerAddress: BytesLike,
      managerMessage: BytesLike,
      endpointPayload: BytesLike
    ],
    [[EndpointStructs.EndpointMessageStructOutput, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "encodeEndpointInstruction"
  ): TypedContractMethod<
    [instruction: EndpointStructs.EndpointInstructionStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "encodeEndpointInstructions"
  ): TypedContractMethod<
    [instructions: EndpointStructs.EndpointInstructionStruct[]],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "encodeEndpointMessage"
  ): TypedContractMethod<
    [prefix: BytesLike, m: EndpointStructs.EndpointMessageStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "encodeManagerMessage"
  ): TypedContractMethod<
    [m: EndpointStructs.ManagerMessageStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "encodeNativeTokenTransfer"
  ): TypedContractMethod<
    [m: EndpointStructs.NativeTokenTransferStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "managerMessageDigest"
  ): TypedContractMethod<
    [sourceChainId: BigNumberish, m: EndpointStructs.ManagerMessageStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "parseEndpointAndManagerMessage"
  ): TypedContractMethod<
    [expectedPrefix: BytesLike, payload: BytesLike],
    [
      [
        EndpointStructs.EndpointMessageStructOutput,
        EndpointStructs.ManagerMessageStructOutput
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "parseEndpointInstructionChecked"
  ): TypedContractMethod<
    [encoded: BytesLike],
    [EndpointStructs.EndpointInstructionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "parseEndpointInstructionUnchecked"
  ): TypedContractMethod<
    [encoded: BytesLike, offset: BigNumberish],
    [
      [EndpointStructs.EndpointInstructionStructOutput, bigint] & {
        instruction: EndpointStructs.EndpointInstructionStructOutput;
        nextOffset: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "parseEndpointInstructions"
  ): TypedContractMethod<
    [encoded: BytesLike],
    [EndpointStructs.EndpointInstructionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "parseManagerMessage"
  ): TypedContractMethod<
    [encoded: BytesLike],
    [EndpointStructs.ManagerMessageStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "parseNativeTokenTransfer"
  ): TypedContractMethod<
    [encoded: BytesLike],
    [EndpointStructs.NativeTokenTransferStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "sortEndpointInstructions"
  ): TypedContractMethod<
    [instructions: EndpointStructs.EndpointInstructionStruct[]],
    [EndpointStructs.EndpointInstructionStructOutput[]],
    "view"
  >;

  filters: {};
}
