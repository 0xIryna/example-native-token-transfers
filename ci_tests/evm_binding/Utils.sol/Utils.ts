/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace VmSafe {
  export type ChainInfoStruct = { forkId: BigNumberish; chainId: BigNumberish };

  export type ChainInfoStructOutput = [forkId: bigint, chainId: bigint] & {
    forkId: bigint;
    chainId: bigint;
  };

  export type StorageAccessStruct = {
    account: AddressLike;
    slot: BytesLike;
    isWrite: boolean;
    previousValue: BytesLike;
    newValue: BytesLike;
    reverted: boolean;
  };

  export type StorageAccessStructOutput = [
    account: string,
    slot: string,
    isWrite: boolean,
    previousValue: string,
    newValue: string,
    reverted: boolean
  ] & {
    account: string;
    slot: string;
    isWrite: boolean;
    previousValue: string;
    newValue: string;
    reverted: boolean;
  };

  export type AccountAccessStruct = {
    chainInfo: VmSafe.ChainInfoStruct;
    kind: BigNumberish;
    account: AddressLike;
    accessor: AddressLike;
    initialized: boolean;
    oldBalance: BigNumberish;
    newBalance: BigNumberish;
    deployedCode: BytesLike;
    value: BigNumberish;
    data: BytesLike;
    reverted: boolean;
    storageAccesses: VmSafe.StorageAccessStruct[];
  };

  export type AccountAccessStructOutput = [
    chainInfo: VmSafe.ChainInfoStructOutput,
    kind: bigint,
    account: string,
    accessor: string,
    initialized: boolean,
    oldBalance: bigint,
    newBalance: bigint,
    deployedCode: string,
    value: bigint,
    data: string,
    reverted: boolean,
    storageAccesses: VmSafe.StorageAccessStructOutput[]
  ] & {
    chainInfo: VmSafe.ChainInfoStructOutput;
    kind: bigint;
    account: string;
    accessor: string;
    initialized: boolean;
    oldBalance: bigint;
    newBalance: bigint;
    deployedCode: string;
    value: bigint;
    data: string;
    reverted: boolean;
    storageAccesses: VmSafe.StorageAccessStructOutput[];
  };

  export type LogStruct = {
    topics: BytesLike[];
    data: BytesLike;
    emitter: AddressLike;
  };

  export type LogStructOutput = [
    topics: string[],
    data: string,
    emitter: string
  ] & { topics: string[]; data: string; emitter: string };
}

export interface UtilsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "assertSafeUpgradeableConstructor"
      | "fetchQueuedTransferDigestsFromLogs"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assertSafeUpgradeableConstructor",
    values: [VmSafe.AccountAccessStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchQueuedTransferDigestsFromLogs",
    values: [VmSafe.LogStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "assertSafeUpgradeableConstructor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchQueuedTransferDigestsFromLogs",
    data: BytesLike
  ): Result;
}

export interface Utils extends BaseContract {
  connect(runner?: ContractRunner | null): Utils;
  waitForDeployment(): Promise<this>;

  interface: UtilsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assertSafeUpgradeableConstructor: TypedContractMethod<
    [accesses: VmSafe.AccountAccessStruct[]],
    [void],
    "view"
  >;

  fetchQueuedTransferDigestsFromLogs: TypedContractMethod<
    [logs: VmSafe.LogStruct[]],
    [string[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "assertSafeUpgradeableConstructor"
  ): TypedContractMethod<
    [accesses: VmSafe.AccountAccessStruct[]],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "fetchQueuedTransferDigestsFromLogs"
  ): TypedContractMethod<[logs: VmSafe.LogStruct[]], [string[]], "view">;

  filters: {};
}
